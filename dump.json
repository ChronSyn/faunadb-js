[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/AsyncStream.js",
    "memberof": null,
    "longname": "src/AsyncStream.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/**\nAsynchronous iterator protocol. Asynchronously produces a stream of values on demand.\nAsyncStreams are mutable objects, meaning they can only be used once.\n\nUnlike a series of events, this doesn't produce the next value unless asked to,\nmaking functions like {@link AsyncStream#takeWhile} possible.\n*/\nexport default class AsyncStream {\n  /**\n  Creates an AsyncStream from any [iterable](\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable).\n  */\n  static fromIterable(iter) {\n    return new IteratorStream(iter[Symbol.iterator]())\n  }\n\n  /**\n  This works like an async version of the [iterator protocol](\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterator).\n  @abstract\n  @return {Promise<{value, done: boolean}>}\n    If `done`, `value` should be ignored.\n  */\n  async next() {\n    throw new Error('Not implemented.')\n  }\n\n  /**\n  Perform an action for each value in the stream.\n  @param {function(elem): void} doEach\n  @return {Promise<void>}\n  */\n  async each(doEach) {\n    for (;;) {\n      const {value, done} = await this.next()\n      if (done)\n        break\n      await doEach(value)\n    }\n  }\n\n  /**\n  Collect every value into an Array.\n  @return {Promise<Array>}\n  */\n  async all() {\n    const all = []\n    await this.each(val => {\n      all.push(val)\n    })\n    return all\n  }\n\n  /**\n  Lazily applies `mapFunc` to every value.\n  @param {function(elem)} mapFunc\n  @return {AsyncStream}\n  */\n  map(mapFunc) {\n    return new MapStream(this, mapFunc)\n  }\n\n  /**\n  Lazily removes elements not satisfying `predicate`.\n  @param {function(elem): boolean} predicate\n  @return {AsyncStream}\n  */\n  filter(predicate) {\n    return new FilterStream(this, predicate)\n  }\n\n  /**\n  Ends the stream at the first element not satisfying `predicate`.\n  @param {function(elem): boolean} predicate\n  @return {AsyncStream}\n  */\n  takeWhile(predicate) {\n    return new TakeWhileStream(this, predicate)\n  }\n\n  /**\n  Assuming that this stream's elements are iterable, returns the concatenation of their contents.\n  @return {AsyncStream}\n  */\n  flatten() {\n    return new FlattenStream(this)\n  }\n\n  /**\n  Applies 'flatMapFunc' to each element and concatenates the results.\n  @param {function(elem): iterable} flatMapFunc\n  @return {AsyncStream}\n  */\n  flatMap(flatMapFunc) {\n    return this.map(flatMapFunc).flatten()\n  }\n}\n\nclass IteratorStream extends AsyncStream {\n  constructor(iterator) {\n    super()\n    this.iterator = iterator\n  }\n\n  next() {\n    return this.iterator.next()\n  }\n}\n\nclass MapStream extends AsyncStream {\n  constructor(base, mapFunc) {\n    super()\n    this.base = base\n    this.mapFunc = mapFunc\n  }\n\n  async next() {\n    const {value, done} = await this.base.next()\n    if (done)\n      return {done}\n    else\n      return {value: await this.mapFunc(value), done}\n  }\n}\n\nclass FilterStream extends AsyncStream {\n  constructor(base, predicate) {\n    super()\n    this.base = base\n    this.predicate = predicate\n  }\n\n  async next() {\n    for (;;) {\n      const {value, done} = await this.base.next()\n      if (done)\n        return {done}\n      if (await this.predicate(value))\n        return {value, done}\n    }\n  }\n}\n\nclass TakeWhileStream extends AsyncStream {\n  constructor(base, predicate) {\n    super()\n    this.base = base\n    this.predicate = predicate\n  }\n\n  async next() {\n    const {value, done} = await this.base.next()\n    if (done)\n      return {done}\n    if (!(await this.predicate(value)))\n      return {done: true}\n    return {value, done}\n  }\n}\n\nclass FlattenStream extends AsyncStream {\n  constructor(base) {\n    super()\n    this.base = base\n    this.curIter = {next() { return {done: true} }}\n  }\n\n  async next() {\n    const {value, done} = this.curIter.next()\n    if (done) {\n      const {value, done} = await this.base.next()\n      if (done)\n        return {done}\n      this.curIter = value[Symbol.iterator]()\n      return await this.next()\n    } else\n      return {value, done}\n  }\n}\n"
  },
  {
    "__docId__": 1,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "AsyncStream",
    "memberof": "src/AsyncStream.js",
    "longname": "src/AsyncStream.js~AsyncStream",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/AsyncStream.js",
    "importStyle": "AsyncStream",
    "description": "Asynchronous iterator protocol. Asynchronously produces a stream of values on demand.\nAsyncStreams are mutable objects, meaning they can only be used once.\nUnlike a series of events, this doesn't produce the next value unless asked to,\nmaking functions like {@link AsyncStream#takeWhile} possible.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "fromIterable",
    "memberof": "src/AsyncStream.js~AsyncStream",
    "longname": "src/AsyncStream.js~AsyncStream.fromIterable",
    "access": null,
    "description": " Creates an AsyncStream from any [iterable](\n https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable).",
    "lineNumber": 13,
    "params": [
      {
        "name": "iter",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 3,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "next",
    "memberof": "src/AsyncStream.js~AsyncStream",
    "longname": "src/AsyncStream.js~AsyncStream#next",
    "access": null,
    "description": " This works like an async version of the [iterator protocol](\n https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterator).\n @abstract\n @return {Promise<{value, done: boolean}>}\n   If `done`, `value` should be ignored.",
    "lineNumber": 24,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 4,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "each",
    "memberof": "src/AsyncStream.js~AsyncStream",
    "longname": "src/AsyncStream.js~AsyncStream#each",
    "access": null,
    "description": " Perform an action for each value in the stream.\n @param {function(elem): void} doEach\n @return {Promise<void>}",
    "lineNumber": 33,
    "params": [
      {
        "name": "doEach",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 5,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "all",
    "memberof": "src/AsyncStream.js~AsyncStream",
    "longname": "src/AsyncStream.js~AsyncStream#all",
    "access": null,
    "description": " Collect every value into an Array.\n @return {Promise<Array>}",
    "lineNumber": 46,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 6,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "map",
    "memberof": "src/AsyncStream.js~AsyncStream",
    "longname": "src/AsyncStream.js~AsyncStream#map",
    "access": null,
    "description": " Lazily applies `mapFunc` to every value.\n @param {function(elem)} mapFunc\n @return {AsyncStream}",
    "lineNumber": 59,
    "params": [
      {
        "name": "mapFunc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 7,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "filter",
    "memberof": "src/AsyncStream.js~AsyncStream",
    "longname": "src/AsyncStream.js~AsyncStream#filter",
    "access": null,
    "description": " Lazily removes elements not satisfying `predicate`.\n @param {function(elem): boolean} predicate\n @return {AsyncStream}",
    "lineNumber": 68,
    "params": [
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 8,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "takeWhile",
    "memberof": "src/AsyncStream.js~AsyncStream",
    "longname": "src/AsyncStream.js~AsyncStream#takeWhile",
    "access": null,
    "description": " Ends the stream at the first element not satisfying `predicate`.\n @param {function(elem): boolean} predicate\n @return {AsyncStream}",
    "lineNumber": 77,
    "params": [
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 9,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "flatten",
    "memberof": "src/AsyncStream.js~AsyncStream",
    "longname": "src/AsyncStream.js~AsyncStream#flatten",
    "access": null,
    "description": " Assuming that this stream's elements are iterable, returns the concatenation of their contents.\n @return {AsyncStream}",
    "lineNumber": 85,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 10,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "flatMap",
    "memberof": "src/AsyncStream.js~AsyncStream",
    "longname": "src/AsyncStream.js~AsyncStream#flatMap",
    "access": null,
    "description": " Applies 'flatMapFunc' to each element and concatenates the results.\n @param {function(elem): iterable} flatMapFunc\n @return {AsyncStream}",
    "lineNumber": 94,
    "params": [
      {
        "name": "flatMapFunc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 11,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "IteratorStream",
    "memberof": "src/AsyncStream.js",
    "longname": "src/AsyncStream.js~IteratorStream",
    "access": null,
    "export": false,
    "importPath": "faunadb/src/AsyncStream.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "interface": false,
    "extends": [
      "AsyncStream"
    ]
  },
  {
    "__docId__": 12,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/AsyncStream.js~IteratorStream",
    "longname": "src/AsyncStream.js~IteratorStream#constructor",
    "access": null,
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [
      {
        "name": "iterator",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 13,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "iterator",
    "memberof": "src/AsyncStream.js~IteratorStream",
    "longname": "src/AsyncStream.js~IteratorStream#iterator",
    "access": null,
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 14,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "next",
    "memberof": "src/AsyncStream.js~IteratorStream",
    "longname": "src/AsyncStream.js~IteratorStream#next",
    "access": null,
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 15,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MapStream",
    "memberof": "src/AsyncStream.js",
    "longname": "src/AsyncStream.js~MapStream",
    "access": null,
    "export": false,
    "importPath": "faunadb/src/AsyncStream.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "interface": false,
    "extends": [
      "AsyncStream"
    ]
  },
  {
    "__docId__": 16,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/AsyncStream.js~MapStream",
    "longname": "src/AsyncStream.js~MapStream#constructor",
    "access": null,
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      },
      {
        "name": "mapFunc",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 17,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "base",
    "memberof": "src/AsyncStream.js~MapStream",
    "longname": "src/AsyncStream.js~MapStream#base",
    "access": null,
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 18,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "mapFunc",
    "memberof": "src/AsyncStream.js~MapStream",
    "longname": "src/AsyncStream.js~MapStream#mapFunc",
    "access": null,
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 19,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "next",
    "memberof": "src/AsyncStream.js~MapStream",
    "longname": "src/AsyncStream.js~MapStream#next",
    "access": null,
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 20,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "FilterStream",
    "memberof": "src/AsyncStream.js",
    "longname": "src/AsyncStream.js~FilterStream",
    "access": null,
    "export": false,
    "importPath": "faunadb/src/AsyncStream.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "interface": false,
    "extends": [
      "AsyncStream"
    ]
  },
  {
    "__docId__": 21,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/AsyncStream.js~FilterStream",
    "longname": "src/AsyncStream.js~FilterStream#constructor",
    "access": null,
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 22,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "base",
    "memberof": "src/AsyncStream.js~FilterStream",
    "longname": "src/AsyncStream.js~FilterStream#base",
    "access": null,
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 23,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "predicate",
    "memberof": "src/AsyncStream.js~FilterStream",
    "longname": "src/AsyncStream.js~FilterStream#predicate",
    "access": null,
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 24,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "next",
    "memberof": "src/AsyncStream.js~FilterStream",
    "longname": "src/AsyncStream.js~FilterStream#next",
    "access": null,
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 25,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TakeWhileStream",
    "memberof": "src/AsyncStream.js",
    "longname": "src/AsyncStream.js~TakeWhileStream",
    "access": null,
    "export": false,
    "importPath": "faunadb/src/AsyncStream.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "interface": false,
    "extends": [
      "AsyncStream"
    ]
  },
  {
    "__docId__": 26,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/AsyncStream.js~TakeWhileStream",
    "longname": "src/AsyncStream.js~TakeWhileStream#constructor",
    "access": null,
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 27,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "base",
    "memberof": "src/AsyncStream.js~TakeWhileStream",
    "longname": "src/AsyncStream.js~TakeWhileStream#base",
    "access": null,
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 28,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "predicate",
    "memberof": "src/AsyncStream.js~TakeWhileStream",
    "longname": "src/AsyncStream.js~TakeWhileStream#predicate",
    "access": null,
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 29,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "next",
    "memberof": "src/AsyncStream.js~TakeWhileStream",
    "longname": "src/AsyncStream.js~TakeWhileStream#next",
    "access": null,
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 30,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "FlattenStream",
    "memberof": "src/AsyncStream.js",
    "longname": "src/AsyncStream.js~FlattenStream",
    "access": null,
    "export": false,
    "importPath": "faunadb/src/AsyncStream.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "interface": false,
    "extends": [
      "AsyncStream"
    ]
  },
  {
    "__docId__": 31,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/AsyncStream.js~FlattenStream",
    "longname": "src/AsyncStream.js~FlattenStream#constructor",
    "access": null,
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 32,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "base",
    "memberof": "src/AsyncStream.js~FlattenStream",
    "longname": "src/AsyncStream.js~FlattenStream#base",
    "access": null,
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 33,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "curIter",
    "memberof": "src/AsyncStream.js~FlattenStream",
    "longname": "src/AsyncStream.js~FlattenStream#curIter",
    "access": null,
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 34,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "next",
    "memberof": "src/AsyncStream.js~FlattenStream",
    "longname": "src/AsyncStream.js~FlattenStream#next",
    "access": null,
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 35,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "curIter",
    "memberof": "src/AsyncStream.js~FlattenStream",
    "longname": "src/AsyncStream.js~FlattenStream#curIter",
    "access": null,
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 36,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/PageStream.js",
    "memberof": null,
    "longname": "src/PageStream.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Page} from './objects'\nimport * as query from './query'\nimport AsyncStream from './AsyncStream'\nimport {applyDefaults} from './_util'\n\n/** Used to iterate over the pages of a query. */\nexport default class PageStream extends AsyncStream {\n  /**\n  Yields individual elements rather than whole pages at a time.\n  Parameters are the same as the constructor.\n  */\n  static elements(client, set, opts={}) {\n    return new PageStream(client, set, opts).flatten()\n  }\n\n  /**\n   * @param {Client} client\n   * @param {Object} set Set query made by {@link match} or similar.\n   * @param {number} opts.pageSize Number of elements in each page.\n   * @param {lambda} opts.mapLambda Mapping query applied to each element of each page.\n   */\n  constructor(client, set, opts={}) {\n    super()\n    this.client = client\n    this.set = set\n\n    Object.assign(this, applyDefaults(opts, {\n      // `undefined` automatically removed from queries by JSON.stringify.\n      pageSize: undefined,\n      mapLambda: null\n    }))\n\n    this.direction = undefined\n    this.cursor = undefined\n  }\n\n  /** @override */\n  async next() {\n    if (this.cursor === 'done')\n      return {done: true}\n\n    let q = query.paginate(this.set, {size: this.pageSize, [this.direction]: this.cursor})\n    if (this.mapLambda !== null)\n      q = query.map(this.mapLambda, q)\n\n    const page = Page.fromRaw(await this.client.query(q))\n\n    if (this.direction === undefined)\n      this.direction = page.after === undefined ? 'before' : 'after'\n    this.cursor = page[this.direction]\n\n    if (this.cursor === undefined)\n      this.cursor = 'done'\n    return {done: false, value: page.data}\n  }\n}\n"
  },
  {
    "__docId__": 37,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "PageStream",
    "memberof": "src/PageStream.js",
    "longname": "src/PageStream.js~PageStream",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/PageStream.js",
    "importStyle": "PageStream",
    "description": "Used to iterate over the pages of a query.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/AsyncStream~AsyncStream"
    ]
  },
  {
    "__docId__": 38,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "elements",
    "memberof": "src/PageStream.js~PageStream",
    "longname": "src/PageStream.js~PageStream.elements",
    "access": null,
    "description": " Yields individual elements rather than whole pages at a time.\n Parameters are the same as the constructor.",
    "lineNumber": 12,
    "params": [
      {
        "name": "client",
        "types": [
          "*"
        ]
      },
      {
        "name": "set",
        "types": [
          "*"
        ]
      },
      {
        "name": "opts",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 39,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/PageStream.js~PageStream",
    "longname": "src/PageStream.js~PageStream#constructor",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object} set Set query made by {@link match"
        ],
        "spread": false,
        "optional": false,
        "name": "or",
        "description": "similar."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "opts.pageSize",
        "description": "Number of elements in each page."
      },
      {
        "nullable": null,
        "types": [
          "lambda"
        ],
        "spread": false,
        "optional": false,
        "name": "opts.mapLambda",
        "description": "Mapping query applied to each element of each page."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 40,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "client",
    "memberof": "src/PageStream.js~PageStream",
    "longname": "src/PageStream.js~PageStream#client",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 41,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "set",
    "memberof": "src/PageStream.js~PageStream",
    "longname": "src/PageStream.js~PageStream#set",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 42,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "direction",
    "memberof": "src/PageStream.js~PageStream",
    "longname": "src/PageStream.js~PageStream#direction",
    "access": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 43,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "cursor",
    "memberof": "src/PageStream.js~PageStream",
    "longname": "src/PageStream.js~PageStream#cursor",
    "access": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 44,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "next",
    "memberof": "src/PageStream.js~PageStream",
    "longname": "src/PageStream.js~PageStream#next",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 45,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "direction",
    "memberof": "src/PageStream.js~PageStream",
    "longname": "src/PageStream.js~PageStream#direction",
    "access": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 46,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "cursor",
    "memberof": "src/PageStream.js~PageStream",
    "longname": "src/PageStream.js~PageStream#cursor",
    "access": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 47,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "cursor",
    "memberof": "src/PageStream.js~PageStream",
    "longname": "src/PageStream.js~PageStream#cursor",
    "access": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 48,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/client.js",
    "memberof": null,
    "longname": "src/client.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import request from 'request'\nimport winston from 'winston'\nimport {BadRequest, FaunaHTTPError, InternalError, MethodNotAllowed, NotFound,\n  PermissionDenied, Unauthorized, UnavailableError} from './errors'\nimport {Ref} from './objects'\nimport {toJSON, parseJSON} from './_json'\nimport {applyDefaults, removeUndefinedValues} from './_util'\nconst env = process.env\n\nconst debugLogger = env.FAUNA_DEBUG || env.NODE_DEBUG === 'fauna' ? winston : null\n\n/**\n * Directly communicates with FaunaDB via JSON.\n *\n * It is encouraged to pass e.g. {@link Ref} objects instead of raw JSON data.\n *\n * All methods return a converted JSON response.\n * This is an object containing Arrays, strings, and other objects.\n * Any {@link Ref} or {@link Set} values in it will also be parsed.\n * (So instead of `{ \"@ref\": \"classes/frogs/123\" }`,\n * you will get `new Ref(\"classes/frogs/123\")`.)\n *\n * There is no way to automatically convert to any other type, such as {@link Event},\n * from the response; you'll have to do that yourself manually.\n */\nexport default class Client {\n  /**\n   *\n   * @param {string} options.domain Base URL for the FaunaDB server.\n   * @param {('http'|'https')} options.scheme HTTP scheme to use.\n   * @param {number} options.port Port of the FaunaDB server.\n   * @param {?Object} options.secret\n   *   Auth token for the FaunaDB server.\n   *   Passed straight to [request](https://github.com/request/request#http-authentication).\n   * @param {string} options.secret.user\n   * @param {string} options.secret.pass\n   * @param {?number} options.timeout Read timeout in seconds.\n   * @param {?Logger} options.logger\n   *   A [winston](https://github.com/winstonjs/winston) Logger\n   */\n  constructor(options) {\n    const opts = applyDefaults(options, {\n      domain: 'rest.faunadb.com',\n      scheme: 'https',\n      port: null,\n      secret: null,\n      timeout: 60,\n      logger: null\n    })\n\n    if (opts.port === null)\n      opts.port = opts.scheme === 'https' ? 443 : 80\n\n    this._baseUrl = `${opts.scheme}://${opts.domain}:${opts.port}`\n    this._timeout = Math.floor(opts.timeout * 1000)\n    this._secret = opts.secret\n    this._logger = opts.logger\n  }\n\n  /**\n   * HTTP `GET`.\n   * See the [docs](https://faunadb.com/documentation/rest).\n   * @param {string|Ref} path Path relative the `domain` from the constructor.\n   * @param {Object} query URL parameters.\n   * @return {Promise<Object>} Converted JSON response.\n   */\n  get(path, query=null) {\n    return this._execute('GET', path, null, query)\n  }\n\n  /**\n   * HTTP `POST`.\n   * See the [docs](https://faunadb.com/documentation/rest).\n   * @param {string|Ref} path Path relative to the `domain` from the constructor.\n   * @param {Object} data Object to be converted to request JSON.\n   * @return {Promise<Object>} Converted JSON response.\n   */\n  post(path, data) {\n    return this._execute('POST', path, data)\n  }\n\n  /**\n   * Like {@link post}, but a `PUT` request.\n   * See the [docs](https://faunadb.com/documentation/rest).\n   */\n  put(path, data) {\n    return this._execute('PUT', path, data)\n  }\n\n  /**\n   * Like {@link post}, but a `PATCH` request.\n   * See the [docs](https://faunadb.com/documentation/rest).\n   */\n  patch(path, data) {\n    return this._execute('PATCH', path, data)\n  }\n\n  /**\n   * Like {@link post}, but a `DELETE` request.\n   * See the [docs](https://faunadb.com/documentation/rest).\n   */\n  delete(path, data) {\n    return this._execute('DELETE', path, data)\n  }\n\n  /**\n   * Use the FaunaDB query API.\n   * See the [docs](https://faunadb.com/documentation/queries)\n   * and the query functions in this documentation.\n   * @param expression {object} Created from query functions such as {@link add}.\n   * @return {Promise<Object>} Server's response to the query.\n   */\n  query(expression) {\n    return this._execute('POST', '', expression)\n  }\n\n  /**\n   * Ping FaunaDB.\n   * See the [docs](https://faunadb.com/documentation/rest#other).\n   * @return {Promise<string>}\n   */\n  ping(scope, timeout) {\n    return this.get('ping', {scope, timeout})\n  }\n\n  _log(indented, logged) {\n    if (indented) {\n      const indent_str = '  '\n      logged = indent_str + logged.split('\\n').join(`\\n${indent_str}`)\n    }\n\n    if (debugLogger !== null)\n      debugLogger.info(logged)\n    if (this._logger !== null)\n      this._logger.info(logged)\n  }\n\n  async _execute(action, path, data, query=null) {\n    if (path instanceof Ref)\n      path = path.value\n    if (query !== null) {\n      query = removeUndefinedValues(query)\n      if (Object.keys(query).length === 0)\n        query = null\n    }\n\n    if (this._logger === null && debugLogger === null) {\n      const {response, body} = await this._execute_without_logging(action, path, data, query)\n      return handleResponse(response, parseJSON(body))\n    } else {\n      const real_time_begin = Date.now()\n      const {response, body} = await this._execute_without_logging(action, path, data, query)\n      const real_time = Date.now() - real_time_begin\n\n      this._log(false, `Fauna ${action} /${path}${queryStringForLogging(query)}`)\n      this._log(true, `Credentials: ${JSON.stringify(this._secret)}`)\n      if (data)\n        this._log(true, `Request JSON: ${toJSON(data, true)}`)\n\n      const headers_json = toJSON(response.headers, true)\n      const response_object = parseJSON(body)\n      const response_json = toJSON(response_object, true)\n      this._log(true, `Response headers: ${headers_json}`)\n      this._log(true, `Response JSON: ${response_json}`)\n      const\n        statusCode = response.statusCode,\n        apiTime = response.headers['x-http-request-processing-time'],\n        latency = Math.floor(real_time)\n      this._log(true,\n        `Response (${statusCode}): API processing ${apiTime}ms, network latency ${latency}ms`)\n      return handleResponse(response, response_object)\n    }\n  }\n\n  _execute_without_logging(action, path, data, query) {\n    return new Promise((resolve, reject) => {\n      // request has a bug when trying to request empty path.\n      if (path === '')\n        path = '/'\n\n      const opts = {\n        method: action,\n        baseUrl: this._baseUrl,\n        url: path,\n        auth: this._secret,\n        qs: query,\n        body: data === null ? null : toJSON(data),\n        timeout: this._timeout\n      }\n\n      request(opts, (err, response, body) => {\n        if (err)\n          reject(err)\n        else\n          resolve({response, body})\n      })\n    })\n  }\n}\n\nconst\n  handleResponse = (response, response_object) => {\n    const code = response.statusCode\n    if (200 <= code && code <= 299)\n      return response_object.resource\n    else\n      switch (code) {\n        case 400:\n          throw new BadRequest(response_object)\n        case 401:\n          throw new Unauthorized(response_object)\n        case 403:\n          throw new PermissionDenied(response_object)\n        case 404:\n          throw new NotFound(response_object)\n        case 405:\n          throw new MethodNotAllowed(response_object)\n        case 500:\n          throw new InternalError(response_object)\n        case 503:\n          throw new UnavailableError(response_object)\n        default:\n          throw new FaunaHTTPError(response_object)\n      }\n  },\n\n  queryStringForLogging = query =>\n    query ? `?${Object.keys(query).map(key => `${key}=${query[key]}`).join('&')}` : ''\n"
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "env",
    "memberof": "src/client.js",
    "longname": "src/client.js~env",
    "access": null,
    "export": false,
    "importPath": "faunadb/src/client.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "debugLogger",
    "memberof": "src/client.js",
    "longname": "src/client.js~debugLogger",
    "access": null,
    "export": false,
    "importPath": "faunadb/src/client.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Client",
    "memberof": "src/client.js",
    "longname": "src/client.js~Client",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/client.js",
    "importStyle": "Client",
    "description": "Directly communicates with FaunaDB via JSON.\n\nIt is encouraged to pass e.g. {@link Ref} objects instead of raw JSON data.\n\nAll methods return a converted JSON response.\nThis is an object containing Arrays, strings, and other objects.\nAny {@link Ref} or {@link Set} values in it will also be parsed.\n(So instead of `{ \"@ref\": \"classes/frogs/123\" }`,\nyou will get `new Ref(\"classes/frogs/123\")`.)\n\nThere is no way to automatically convert to any other type, such as {@link Event},\nfrom the response; you'll have to do that yourself manually.",
    "lineNumber": 26,
    "interface": false
  },
  {
    "__docId__": 52,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/client.js~Client",
    "longname": "src/client.js~Client#constructor",
    "access": null,
    "description": "",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.domain",
        "description": "Base URL for the FaunaDB server."
      },
      {
        "nullable": null,
        "types": [
          "'http'",
          "'https'"
        ],
        "spread": false,
        "optional": false,
        "name": "options.scheme",
        "description": "HTTP scheme to use."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.port",
        "description": "Port of the FaunaDB server."
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.secret",
        "description": "Auth token for the FaunaDB server.\n  Passed straight to [request](https://github.com/request/request#http-authentication)."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.secret.user",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.secret.pass",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.timeout",
        "description": "Read timeout in seconds."
      },
      {
        "nullable": true,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": false,
        "name": "options.logger",
        "description": "A [winston](https://github.com/winstonjs/winston) Logger"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 53,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_baseUrl",
    "memberof": "src/client.js~Client",
    "longname": "src/client.js~Client#_baseUrl",
    "access": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_timeout",
    "memberof": "src/client.js~Client",
    "longname": "src/client.js~Client#_timeout",
    "access": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_secret",
    "memberof": "src/client.js~Client",
    "longname": "src/client.js~Client#_secret",
    "access": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_logger",
    "memberof": "src/client.js~Client",
    "longname": "src/client.js~Client#_logger",
    "access": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "get",
    "memberof": "src/client.js~Client",
    "longname": "src/client.js~Client#get",
    "access": null,
    "description": "HTTP `GET`.\nSee the [docs](https://faunadb.com/documentation/rest).",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Ref"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Path relative the `domain` from the constructor."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "query",
        "description": "URL parameters."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Converted JSON response."
    },
    "generator": false
  },
  {
    "__docId__": 58,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "post",
    "memberof": "src/client.js~Client",
    "longname": "src/client.js~Client#post",
    "access": null,
    "description": "HTTP `POST`.\nSee the [docs](https://faunadb.com/documentation/rest).",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Ref"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Path relative to the `domain` from the constructor."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Object to be converted to request JSON."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Converted JSON response."
    },
    "generator": false
  },
  {
    "__docId__": 59,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "put",
    "memberof": "src/client.js~Client",
    "longname": "src/client.js~Client#put",
    "access": null,
    "description": "Like {@link post}, but a `PUT` request.\nSee the [docs](https://faunadb.com/documentation/rest).",
    "lineNumber": 86,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 60,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "patch",
    "memberof": "src/client.js~Client",
    "longname": "src/client.js~Client#patch",
    "access": null,
    "description": "Like {@link post}, but a `PATCH` request.\nSee the [docs](https://faunadb.com/documentation/rest).",
    "lineNumber": 94,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 61,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "delete",
    "memberof": "src/client.js~Client",
    "longname": "src/client.js~Client#delete",
    "access": null,
    "description": "Like {@link post}, but a `DELETE` request.\nSee the [docs](https://faunadb.com/documentation/rest).",
    "lineNumber": 102,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 62,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "query",
    "memberof": "src/client.js~Client",
    "longname": "src/client.js~Client#query",
    "access": null,
    "description": "Use the FaunaDB query API.\nSee the [docs](https://faunadb.com/documentation/queries)\nand the query functions in this documentation.",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "expression",
        "description": "{object} Created from query functions such as {@link add}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Server's response to the query."
    },
    "generator": false
  },
  {
    "__docId__": 63,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "ping",
    "memberof": "src/client.js~Client",
    "longname": "src/client.js~Client#ping",
    "access": null,
    "description": "Ping FaunaDB.\nSee the [docs](https://faunadb.com/documentation/rest#other).",
    "lineNumber": 122,
    "params": [
      {
        "name": "scope",
        "types": [
          "*"
        ]
      },
      {
        "name": "timeout",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 64,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_log",
    "memberof": "src/client.js~Client",
    "longname": "src/client.js~Client#_log",
    "access": null,
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "params": [
      {
        "name": "indented",
        "types": [
          "*"
        ]
      },
      {
        "name": "logged",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 65,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_execute",
    "memberof": "src/client.js~Client",
    "longname": "src/client.js~Client#_execute",
    "access": null,
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "params": [
      {
        "name": "action",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "query",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 66,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_execute_without_logging",
    "memberof": "src/client.js~Client",
    "longname": "src/client.js~Client#_execute_without_logging",
    "access": null,
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "params": [
      {
        "name": "action",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "query",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "handleResponse",
    "memberof": "src/client.js",
    "longname": "src/client.js~handleResponse",
    "access": null,
    "export": false,
    "importPath": "faunadb/src/client.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/errors.js",
    "memberof": null,
    "longname": "src/errors.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/** Base class for all FaunaDB errors. */\nexport class FaunaError extends Error {\n  constructor(message) {\n    super(message)\n    // Subclassing error doesn't work right until node 4.0.\n    // This is a kludge to give it some stack.\n    if (!('stack' in this)) {\n      this.message = message\n      this.stack = new Error(this.message).stack\n    }\n  }\n}\n\n/** Thrown when a query is malformed */\nexport class InvalidQuery extends FaunaError {}\n\n/** Thrown when a value can not be accepted. */\nexport class InvalidValue extends FaunaError {}\n\n/** Thrown when the FaunaDB server responds with an error. */\nexport class FaunaHTTPError extends FaunaError {\n  constructor(response_object) {\n    const errors = 'error' in response_object ?\n      [response_object['error']] :\n      response_object['errors']\n    const reason = response_object.reason\n    super(reason || errors[0].code || errors[0])\n    this.errors = errors\n    this.reason = reason\n    this.parameters = response_object.parameters\n  }\n}\n\n/** HTTP 400 error. */\nexport class BadRequest extends FaunaHTTPError {}\n\n/** HTTP 401 error. */\nexport class Unauthorized extends FaunaHTTPError {}\n\n/** HTTP 403 error. */\nexport class PermissionDenied extends FaunaHTTPError {}\n\n/** HTTP 404 error. */\nexport class NotFound extends FaunaHTTPError {}\n\n/** HTTP 405 error. */\nexport class MethodNotAllowed extends FaunaHTTPError {}\n\n/** HTTP 500 error. */\nexport class InternalError extends FaunaHTTPError {}\n\n/** HTTP 503 error. */\nexport class UnavailableError extends FaunaHTTPError {}\n"
  },
  {
    "__docId__": 69,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "FaunaError",
    "memberof": "src/errors.js",
    "longname": "src/errors.js~FaunaError",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/errors.js",
    "importStyle": "{FaunaError}",
    "description": "Base class for all FaunaDB errors.",
    "lineNumber": 2,
    "interface": false,
    "extends": [
      "Error"
    ]
  },
  {
    "__docId__": 70,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/errors.js~FaunaError",
    "longname": "src/errors.js~FaunaError#constructor",
    "access": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 71,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "message",
    "memberof": "src/errors.js~FaunaError",
    "longname": "src/errors.js~FaunaError#message",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "stack",
    "memberof": "src/errors.js~FaunaError",
    "longname": "src/errors.js~FaunaError#stack",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "InvalidQuery",
    "memberof": "src/errors.js",
    "longname": "src/errors.js~InvalidQuery",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/errors.js",
    "importStyle": "{InvalidQuery}",
    "description": "Thrown when a query is malformed",
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "FaunaError"
    ]
  },
  {
    "__docId__": 74,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "InvalidValue",
    "memberof": "src/errors.js",
    "longname": "src/errors.js~InvalidValue",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/errors.js",
    "importStyle": "{InvalidValue}",
    "description": "Thrown when a value can not be accepted.",
    "lineNumber": 18,
    "interface": false,
    "extends": [
      "FaunaError"
    ]
  },
  {
    "__docId__": 75,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "FaunaHTTPError",
    "memberof": "src/errors.js",
    "longname": "src/errors.js~FaunaHTTPError",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/errors.js",
    "importStyle": "{FaunaHTTPError}",
    "description": "Thrown when the FaunaDB server responds with an error.",
    "lineNumber": 21,
    "interface": false,
    "extends": [
      "FaunaError"
    ]
  },
  {
    "__docId__": 76,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/errors.js~FaunaHTTPError",
    "longname": "src/errors.js~FaunaHTTPError#constructor",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "response_object",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 77,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "errors",
    "memberof": "src/errors.js~FaunaHTTPError",
    "longname": "src/errors.js~FaunaHTTPError#errors",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "reason",
    "memberof": "src/errors.js~FaunaHTTPError",
    "longname": "src/errors.js~FaunaHTTPError#reason",
    "access": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "parameters",
    "memberof": "src/errors.js~FaunaHTTPError",
    "longname": "src/errors.js~FaunaHTTPError#parameters",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BadRequest",
    "memberof": "src/errors.js",
    "longname": "src/errors.js~BadRequest",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/errors.js",
    "importStyle": "{BadRequest}",
    "description": "HTTP 400 error.",
    "lineNumber": 35,
    "interface": false,
    "extends": [
      "FaunaHTTPError"
    ]
  },
  {
    "__docId__": 81,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Unauthorized",
    "memberof": "src/errors.js",
    "longname": "src/errors.js~Unauthorized",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/errors.js",
    "importStyle": "{Unauthorized}",
    "description": "HTTP 401 error.",
    "lineNumber": 38,
    "interface": false,
    "extends": [
      "FaunaHTTPError"
    ]
  },
  {
    "__docId__": 82,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "PermissionDenied",
    "memberof": "src/errors.js",
    "longname": "src/errors.js~PermissionDenied",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/errors.js",
    "importStyle": "{PermissionDenied}",
    "description": "HTTP 403 error.",
    "lineNumber": 41,
    "interface": false,
    "extends": [
      "FaunaHTTPError"
    ]
  },
  {
    "__docId__": 83,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "NotFound",
    "memberof": "src/errors.js",
    "longname": "src/errors.js~NotFound",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/errors.js",
    "importStyle": "{NotFound}",
    "description": "HTTP 404 error.",
    "lineNumber": 44,
    "interface": false,
    "extends": [
      "FaunaHTTPError"
    ]
  },
  {
    "__docId__": 84,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MethodNotAllowed",
    "memberof": "src/errors.js",
    "longname": "src/errors.js~MethodNotAllowed",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/errors.js",
    "importStyle": "{MethodNotAllowed}",
    "description": "HTTP 405 error.",
    "lineNumber": 47,
    "interface": false,
    "extends": [
      "FaunaHTTPError"
    ]
  },
  {
    "__docId__": 85,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "memberof": "src/errors.js",
    "longname": "src/errors.js~InternalError",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/errors.js",
    "importStyle": "{InternalError}",
    "description": "HTTP 500 error.",
    "lineNumber": 50,
    "interface": false,
    "extends": [
      "FaunaHTTPError"
    ]
  },
  {
    "__docId__": 86,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "UnavailableError",
    "memberof": "src/errors.js",
    "longname": "src/errors.js~UnavailableError",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/errors.js",
    "importStyle": "{UnavailableError}",
    "description": "HTTP 503 error.",
    "lineNumber": 53,
    "interface": false,
    "extends": [
      "FaunaHTTPError"
    ]
  },
  {
    "__docId__": 87,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/model/Builtin.js",
    "memberof": null,
    "longname": "src/model/Builtin.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import assert from 'assert'\nimport {Ref} from '../objects'\nimport * as query from '../query'\nimport {RefCodec} from './Codec'\nimport Model from './Model'\n\n/**\n * Builtins are special classes that exist by default.\n * If you want to store custom data, you can add new fields with e.g. `Database.addField`.\n */\nexport default class Builtin extends Model {\n  /** @private */\n  static setup(...args) {\n    super.setup(...args)\n    assert(!this.isAbstract())\n    // classRef does not have 'classes' in front\n    this.classRef = new Ref(this.faunaClassName)\n    for (const fieldName in this.fields)\n      // Builtin fields do not have 'data' in front of path\n      this.fields[fieldName].path = [fieldName]\n  }\n}\n\n/** See the [docs](https://faunadb.com/documentation/objects#databases). */\nexport class Database extends Builtin { }\nDatabase.setup('databases', {name: {}, api_version: {}})\n\n/** See the [docs](https://faunadb.com/documentation/objects#keys). */\nexport class Key extends Builtin { }\nKey.setup('keys', {\n  database: {codec: RefCodec},\n  role: {},\n  secret: {},\n  hashed_secret: {}\n})\n\n/** See the [docs](https://faunadb.com/documentation/objects#classes). */\nexport class Class extends Builtin {\n  /**\n   * Creates a Class for the {@link Model} class.\n   * @param {Client} client\n   * @param {Function} modelClass\n   * @param {Object} data Field values for the Class object.\n   * @return {Promise<Class>}\n   */\n  static async createForModel(client, modelClass, data={}) {\n    return await this.create(client, Object.assign({name: modelClass.faunaClassName}, data))\n  }\n\n  /**\n   * Gets the Class associated with a {@link Model} class.\n   * @param {Client} client\n   * @param {Function} modelClass\n   * @return {Promise<Class>}\n   */\n  static async getForModel(client, modelClass) {\n    return await this.get(client, modelClass.classRef)\n  }\n}\nClass.setup('classes', {\n  name: {},\n  history_days: {},\n  ttl_days: {},\n  permissions: {}\n})\n\n/** See the [docs](https://faunadb.com/documentation/objects#indexes). */\nexport class Index extends Builtin {\n  /**\n   * Creates an Index for a {@link Model} class.\n   * The index may not be usable immediately. See the docs.\n   * @param {Client} client\n   * @param {Function} modelClass\n   * @param {string} name\n   * @param {string|Array<{path: string}>} terms\n   * @param {Object} data Field values for the Index object.\n   * @return {Promise<Index>}\n   */\n  static async createForModel(client, modelClass, name, terms, data={}) {\n    if (typeof terms === 'string')\n      terms = [{path: `data.${terms}`}]\n    const source = await Class.getForModel(client, modelClass)\n    return await this.create(client, Object.assign({source: source.ref, name, terms}, data))\n  }\n\n  /**\n   * Set query representing all instances whose value matches the index's term.\n   *\n   * See also {@link Model.pageIndex} and {@link Model.streamIndex}.\n   * @param matchedValues For each of `this.terms`, a value to match it.\n   * @return {object} A query set made by {@link match}.\n   */\n  match(...matchedValues) {\n    // Make query slightly neater by only using array if necessary.\n    if (matchedValues.length === 1)\n      matchedValues = matchedValues[0]\n    return query.match(matchedValues, this.ref)\n  }\n\n  /**\n   * Returns raw data of the first instance matched by this index.\n   * Typically this will be used for an index with `unique: true`.\n   * See also {@link Model.getFromIndex}.\n   * @param matchedValues Same as for {@link match}.\n   * @return {Promise<Object>}\n   */\n  async getSingle(...matchedValues) {\n    return await this.client.query(query.get(this.match(...matchedValues)))\n  }\n}\nIndex.setup('indexes', {\n  name: {},\n  source: {codec: RefCodec},\n  terms: {},\n  values: {},\n  unique: {},\n  permissions: {},\n  active: {}\n})\n\n/**\n * Index over all instances of a class.\n * Not a different faunadb class; just a specialized Index.\n */\nexport class ClassIndex extends Index {\n  /**\n   * Creates a class index for the given model.\n   * If the model is `classes/xyz`, the class index will be `indexes/xyz`.\n   * @param {Client} client\n   * @param {Function} modelClass\n   * @param {Object} data Field values for the ClassIndex object.\n   * @return {Promise<ClassIndex>}\n   */\n  static async createForModel(client, modelClass, data={}) {\n    const name = modelClass.faunaClassName\n    const source = await Class.getForModel(client, modelClass)\n    const terms = [{path: 'class'}]\n    return await ClassIndex.create(client, Object.assign({source: source.ref, name, terms}, data))\n  }\n\n  /**\n   * Fetches the class index.\n   * @param {Client} client\n   * @param {Function} modelClass\n   * @return {Promise<ClassIndex>}\n   */\n  static async getForModel(client, modelClass) {\n    return await ClassIndex.getById(client, modelClass.faunaClassName)\n  }\n\n  /**\n   * Query set of all instances of the class.\n   * @return {object} A query set made by {@link match}.\n   */\n  match() {\n    return query.match(this.getEncoded('source'), this.ref)\n  }\n}\n"
  },
  {
    "__docId__": 88,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Builtin",
    "memberof": "src/model/Builtin.js",
    "longname": "src/model/Builtin.js~Builtin",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/model/Builtin.js",
    "importStyle": "Builtin",
    "description": "Builtins are special classes that exist by default.\nIf you want to store custom data, you can add new fields with e.g. `Database.addField`.",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "src/model/Model~Model"
    ]
  },
  {
    "__docId__": 89,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "setup",
    "memberof": "src/model/Builtin.js~Builtin",
    "longname": "src/model/Builtin.js~Builtin.setup",
    "access": "private",
    "description": null,
    "lineNumber": 13,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "generator": false
  },
  {
    "__docId__": 90,
    "kind": "member",
    "static": true,
    "variation": null,
    "name": "classRef",
    "memberof": "src/model/Builtin.js~Builtin",
    "longname": "src/model/Builtin.js~Builtin.classRef",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Database",
    "memberof": "src/model/Builtin.js",
    "longname": "src/model/Builtin.js~Database",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/model/Builtin.js",
    "importStyle": "{Database}",
    "description": "See the [docs](https://faunadb.com/documentation/objects#databases).",
    "lineNumber": 25,
    "interface": false,
    "extends": [
      "Builtin"
    ]
  },
  {
    "__docId__": 92,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Key",
    "memberof": "src/model/Builtin.js",
    "longname": "src/model/Builtin.js~Key",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/model/Builtin.js",
    "importStyle": "{Key}",
    "description": "See the [docs](https://faunadb.com/documentation/objects#keys).",
    "lineNumber": 29,
    "interface": false,
    "extends": [
      "Builtin"
    ]
  },
  {
    "__docId__": 93,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Class",
    "memberof": "src/model/Builtin.js",
    "longname": "src/model/Builtin.js~Class",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/model/Builtin.js",
    "importStyle": "{Class}",
    "description": "See the [docs](https://faunadb.com/documentation/objects#classes).",
    "lineNumber": 38,
    "interface": false,
    "extends": [
      "Builtin"
    ]
  },
  {
    "__docId__": 94,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "createForModel",
    "memberof": "src/model/Builtin.js~Class",
    "longname": "src/model/Builtin.js~Class.createForModel",
    "access": null,
    "description": "Creates a Class for the {@link Model} class.",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "modelClass",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Field values for the Class object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Class>"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 95,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "getForModel",
    "memberof": "src/model/Builtin.js~Class",
    "longname": "src/model/Builtin.js~Class.getForModel",
    "access": null,
    "description": "Gets the Class associated with a {@link Model} class.",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "modelClass",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Class>"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 96,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Index",
    "memberof": "src/model/Builtin.js",
    "longname": "src/model/Builtin.js~Index",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/model/Builtin.js",
    "importStyle": "{Index}",
    "description": "See the [docs](https://faunadb.com/documentation/objects#indexes).",
    "lineNumber": 68,
    "interface": false,
    "extends": [
      "Builtin"
    ]
  },
  {
    "__docId__": 97,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "createForModel",
    "memberof": "src/model/Builtin.js~Index",
    "longname": "src/model/Builtin.js~Index.createForModel",
    "access": null,
    "description": "Creates an Index for a {@link Model} class.\nThe index may not be usable immediately. See the docs.",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "modelClass",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Array<{path: string}>"
        ],
        "spread": false,
        "optional": false,
        "name": "terms",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Field values for the Index object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Index>"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 98,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "match",
    "memberof": "src/model/Builtin.js~Index",
    "longname": "src/model/Builtin.js~Index#match",
    "access": null,
    "description": "Set query representing all instances whose value matches the index's term.\n\nSee also {@link Model.pageIndex} and {@link Model.streamIndex}.",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "matchedValues",
        "description": "For each of `this.terms`, a value to match it."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "A query set made by {@link match}."
    },
    "generator": false
  },
  {
    "__docId__": 99,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getSingle",
    "memberof": "src/model/Builtin.js~Index",
    "longname": "src/model/Builtin.js~Index#getSingle",
    "access": null,
    "description": "Returns raw data of the first instance matched by this index.\nTypically this will be used for an index with `unique: true`.\nSee also {@link Model.getFromIndex}.",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "matchedValues",
        "description": "Same as for {@link match}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 100,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ClassIndex",
    "memberof": "src/model/Builtin.js",
    "longname": "src/model/Builtin.js~ClassIndex",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/model/Builtin.js",
    "importStyle": "{ClassIndex}",
    "description": "Index over all instances of a class.\nNot a different faunadb class; just a specialized Index.",
    "lineNumber": 125,
    "interface": false,
    "extends": [
      "Index"
    ]
  },
  {
    "__docId__": 101,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "createForModel",
    "memberof": "src/model/Builtin.js~ClassIndex",
    "longname": "src/model/Builtin.js~ClassIndex.createForModel",
    "access": null,
    "description": "Creates a class index for the given model.\nIf the model is `classes/xyz`, the class index will be `indexes/xyz`.",
    "lineNumber": 134,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "modelClass",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Field values for the ClassIndex object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<ClassIndex>"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 102,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "getForModel",
    "memberof": "src/model/Builtin.js~ClassIndex",
    "longname": "src/model/Builtin.js~ClassIndex.getForModel",
    "access": null,
    "description": "Fetches the class index.",
    "lineNumber": 147,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "modelClass",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<ClassIndex>"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 103,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "match",
    "memberof": "src/model/Builtin.js~ClassIndex",
    "longname": "src/model/Builtin.js~ClassIndex#match",
    "access": null,
    "description": "Query set of all instances of the class.",
    "lineNumber": 155,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "A query set made by {@link match}."
    },
    "generator": false
  },
  {
    "__docId__": 104,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/model/Codec.js",
    "memberof": null,
    "longname": "src/model/Codec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {InvalidValue} from '../errors'\nimport {Ref} from '../objects'\n\n/**\n * A Codec sits inside a {@link Field} in a {@link Model} and prepares data for database storage.\n *\n * Encoded values must be JSON data: objects, lists, numbers, {@link Ref}s and {@link Set}s.\n *\n * A field without a Codec must store only JSON data.\n *\n * Input data may be sanitized (e.g. RefCodec converts strings to {@link Ref}s),\n * so there is no guarantee that `codec.decode(codec.encode(value)) === value`.\n */\nexport default class Codec {\n  /**\n   * Converts a value from the database into a more usable object.\n   *\n   * (The value taken from the database will already have {@link Ref}s and {@link Set}s converted.)\n   * @abstract\n   */\n  decode() { throw new Error('Not implemented.') }\n  /**\n   * Converts a value to prepare for storage in the database.\n   * @abstract\n   */\n  encode() { throw new Error('Not implemented.') }\n}\n\n/**\n * Codec for a field whose value is always a {@link Ref}.\n * Also converts any strings coming in to {@link Ref}s.\n */\nexport const RefCodec = {\n  inspect() { return 'RefCodec' },\n\n  decode(ref) {\n    return ref\n  },\n\n  encode(value) {\n    if (value === null)\n      return null\n    else if (typeof value === 'string')\n      return new Ref(value)\n    else if (value instanceof Ref)\n      return value\n    else\n      throw new InvalidValue(`Expected a Ref, got: ${value}`)\n  }\n}\n"
  },
  {
    "__docId__": 105,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Codec",
    "memberof": "src/model/Codec.js",
    "longname": "src/model/Codec.js~Codec",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/model/Codec.js",
    "importStyle": "Codec",
    "description": "A Codec sits inside a {@link Field} in a {@link Model} and prepares data for database storage.\n\nEncoded values must be JSON data: objects, lists, numbers, {@link Ref}s and {@link Set}s.\n\nA field without a Codec must store only JSON data.\n\nInput data may be sanitized (e.g. RefCodec converts strings to {@link Ref}s),\nso there is no guarantee that `codec.decode(codec.encode(value)) === value`.",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 106,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decode",
    "memberof": "src/model/Codec.js~Codec",
    "longname": "src/model/Codec.js~Codec#decode",
    "access": null,
    "description": "Converts a value from the database into a more usable object.\n\n(The value taken from the database will already have {@link Ref}s and {@link Set}s converted.)",
    "lineNumber": 21,
    "params": [],
    "abstract": true,
    "generator": false
  },
  {
    "__docId__": 107,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "encode",
    "memberof": "src/model/Codec.js~Codec",
    "longname": "src/model/Codec.js~Codec#encode",
    "access": null,
    "description": "Converts a value to prepare for storage in the database.",
    "lineNumber": 26,
    "params": [],
    "abstract": true,
    "generator": false
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "RefCodec",
    "memberof": "src/model/Codec.js",
    "longname": "src/model/Codec.js~RefCodec",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/model/Codec.js",
    "importStyle": "{RefCodec}",
    "description": "Codec for a field whose value is always a {@link Ref}.\nAlso converts any strings coming in to {@link Ref}s.",
    "lineNumber": 33,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/model/Field.js",
    "memberof": null,
    "longname": "src/model/Field.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {applyDefaults} from '../_util'\n\n/**\n * Stores information about a field in a {@link Model}.\n */\nexport default class Field {\n  /**\n   * You don't need to call this directly;\n   * this is called for you by {@link Model#setup} and {@link Model#addField}.\n   *\n   * @param {Codec} opts.codec\n   *\n   * @param {@Array<string>} opts.path\n   *   If a model is created with `MyModel.setup(name, {x: {}, y: {}})`,\n   *   the instance data will look like `{ref: ..., ts: ..., data: {x: ..., y: ...}}`.\n   *\n   *   You can override this by providing a different path.\n   */\n  constructor(opts) {\n    Object.assign(this, applyDefaults(opts, {\n      codec: null,\n      path: null\n    }))\n  }\n}"
  },
  {
    "__docId__": 110,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Field",
    "memberof": "src/model/Field.js",
    "longname": "src/model/Field.js~Field",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/model/Field.js",
    "importStyle": "Field",
    "description": "Stores information about a field in a {@link Model}.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 111,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/model/Field.js~Field",
    "longname": "src/model/Field.js~Field#constructor",
    "access": null,
    "description": "You don't need to call this directly;\nthis is called for you by {@link Model#setup} and {@link Model#addField}.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Codec"
        ],
        "spread": false,
        "optional": false,
        "name": "opts.codec",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "@Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "opts.path",
        "description": "If a model is created with `MyModel.setup(name, {x: {}, y: {}})`,\n  the instance data will look like `{ref: ..., ts: ..., data: {x: ..., y: ...}}`.\n\n  You can override this by providing a different path."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 112,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/model/Model.js",
    "memberof": null,
    "longname": "src/model/Model.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {InvalidQuery, InvalidValue} from '../errors'\nimport {Page, Ref} from '../objects'\nimport PageStream from '../PageStream'\nimport * as query from '../query'\nimport {applyDefaults} from '../_util'\nimport Field from './Field'\nimport {calculateDiff, getPath, objectDup, setPath} from './_util'\n\n/**\n * Base class for all models.\n *\n * Models represent database instances.\n * They link a FaunaDB class to a JavaScript class.\n *\n * The basic format is:\n *\n *     class MyModel extends Model {\n *       ... your methods ...\n *     }\n *     // define class name and fields\n *     MyModel.setup('my_models', {\n *       x: {},\n *       y: {converter: new RefConverter(MyModel)}\n *     })\n *\n * {@link Field}s will be constructed and\n * properties will be generated for each field passed to {@link setup}.\n *\n * {@link Class.createForModel} must be called before you can save model instances.\n */\nexport default class Model {\n  /**\n   * @param {string} faunaClassName\n   * @param {object} fields\n   *   Each `key: value` pair is the parameters for `addField`.\n   */\n  static setup(faunaClassName, fields={}) {\n    this.faunaClassName = faunaClassName\n    /**\n     * {@link Ref} for the class itself.\n     *\n     * `instance.ref` should be the same as `new Ref(instance.constructor.classRef, instance.id)`.\n     */\n    this.classRef = new Ref('classes', faunaClassName)\n    /** Object of all fields assigned to this class. */\n    this.fields = {}\n    for (const fieldName in fields)\n      this.addField(fieldName, fields[fieldName])\n  }\n\n  /**\n   * Adds a new field to the class, making getters and setters.\n   *\n   * @param {string} fieldName\n   *   Name for the field. A getter and setter will be made with this name.\n   *   If `fieldOpts.path` is not defined, it defaults to `['data', fieldName]`.\n   * @param {object} fieldOpts\n   *   Parameters for the {@link Field} constructor.\n   */\n  static addField(fieldName, fieldOpts={}) {\n    if (fieldName === 'ref' || fieldName === 'ts')\n      throw new Error('Forbidden field name.')\n\n    if (fieldOpts.path == null)\n      fieldOpts.path = ['data', fieldName]\n    const field = new Field(fieldOpts)\n    this.fields[fieldName] = field\n\n    const {get, set} = field.codec === null ?\n      {\n        get() {\n          return getPath(field.path, this._current)\n        },\n        set(value) {\n          setPath(field.path, value, this._current)\n        }\n      } : {\n        get() {\n          const encoded = getPath(field.path, this._current)\n          const decoded = field.codec.decode(encoded, this)\n          return decoded\n        },\n        set(value) {\n          const encoded = field.codec.encode(value, this)\n          setPath(field.path, encoded, this._current)\n        }\n      }\n    Object.defineProperty(this.prototype, fieldName, {get, set})\n  }\n\n  /**\n   * Initialize (but do not save) a new instance.\n   * @param {Client} client\n   * @param {object} data Fields values for the new instance.\n   */\n  constructor(client, data) {\n    /** Client instance that the model uses to save to the database. */\n    this.client = client\n\n    this._original = {}\n    this._initState()\n\n    for (const fieldName in data) {\n      if (!(fieldName in this.constructor.fields))\n        throw new InvalidValue(`No such field ${fieldName}`)\n      // This calls the field's setter.\n      this[fieldName] = data[fieldName]\n    }\n  }\n\n  /** {@link Ref} of this instance in the database. `null` if {@link isNewInstance}. */\n  get ref() {\n    const ref = this._current.ref\n    return ref === undefined ? null : ref\n  }\n\n  /** The id portion of this instance's {@link Ref}. Fails if {@link isNewInstance}. */\n  get id() {\n    return this.ref === null ? null : this.ref.id\n  }\n\n  /**\n   * Microsecond UNIX timestamp of the latest {@link save}.\n   * `null` if {@link isNewInstance}.\n   */\n  get ts() {\n    const ts = this._current.ts\n    return ts === undefined ? null : ts\n  }\n\n  /** For a field with a {@link Converter}, gets the encoded value. */\n  getEncoded(fieldName) {\n    const field = this.constructor.fields[fieldName]\n    return getPath(field.path, this._current)\n  }\n\n  /** `false` if this has ever been saved to the database. */\n  isNewInstance() {\n    return !('ref' in this._current)\n  }\n\n  /**\n   * Removes this instance from the database.\n   * @return {Promise<Object>}\n   */\n  async delete() {\n    return await this.client.query(this.deleteQuery())\n  }\n\n  /**\n   * Query that deletes this instance.\n   * @return {Object} A {@link delete_expr} expression.\n   */\n  deleteQuery() {\n    if (this.isNewInstance())\n      throw new InvalidQuery('Instance does not exist in the database.')\n    return query.delete_expr(this.ref)\n  }\n\n  /**\n   * Executes {@link saveQuery}.\n   * @param replace Same as for {@link saveQuery}.\n   * @return {Promise<void>}\n   */\n  async save(replace=false) {\n    this._initFromResource(await this.client.query(this.saveQuery(replace)))\n  }\n\n  /**\n   * Query to save this instance to the database.\n   * If {@link isNewInstance}, creates it and sets `ref` and `ts`.\n   * Otherwise, updates any changed fields.\n   *\n   * @param replace\n   *   If true, updates will update *all* fields\n   *   using {@link replaceQuery} instead of {@link updateQuery}.\n   *   See the [docs](https://faunadb.com/documentation/queries#write_functions).\n   * @return {Object} A query expression, ready to use with {@link Client#query}.\n   */\n  saveQuery(replace=false) {\n    return this.isNewInstance() ?\n      this.createQuery() :\n      replace ? this.replaceQuery() : this.updateQuery()\n  }\n\n  /**\n   * Query to create a new instance.\n   * @return {Object} A {@link create} expression.\n   */\n  createQuery() {\n    if (!this.isNewInstance())\n      throw new InvalidQuery('Trying to create instance that has already been created.')\n    return query.create(this.constructor.classRef, query.quote(this._current))\n  }\n\n  /**\n   * Query to replace this instance's data.\n   * @return {Object} A {@link replace} expression.\n   */\n  replaceQuery() {\n    if (this.isNewInstance())\n      throw new InvalidQuery('Instance has not yet been created.')\n    return query.replace(this.ref, query.quote(this._current))\n  }\n\n  /**\n   * Query to update this instance's data.\n   * @return {Object} a {@link update} expression.\n   */\n  updateQuery() {\n    if (this.isNewInstance())\n      throw new InvalidQuery('Instance has not yet been created.')\n    return query.update(this.ref, query.quote(this._diff()))\n  }\n\n  /** A Model class is considered abstract if {@link setup} was never called. */\n  static isAbstract() {\n    return this.faunaClassName === undefined\n  }\n\n  /**\n   * Gets the instance of this class specified by `ref`.\n   * @param {Client} client\n   * @param {Ref} ref Must be a reference to an instance of this class.\n   * @return {Promise<this>} An instance of this class.\n   */\n  static async get(client, ref) {\n    return this.getFromResource(client, await client.get(ref))\n  }\n\n  /**\n   * Gets the instance of this class specified by `id`.\n   * @param {Client} client\n   * @param {number|string} instanceId `id` portion of a {@link Ref} for an instance of this class.\n   * @return {Promise<this>} An instance of this class.\n   */\n  static async getById(client, instanceId) {\n    return await this.get(client, new Ref(this.classRef, instanceId))\n  }\n\n  /**\n   * Initializes and saves a new instance.\n   * @param {Client} client\n   * @param {Object} data Field values for the new instance.\n   * @return {Promise<this>} An instance of this class.\n   */\n  static async create(client, data={}) {\n    const instance = new this(client, data)\n    instance._initFromResource(await client.post(this.classRef, instance._current))\n    return instance\n  }\n\n  /**\n   * Creates a new instance from query results.\n   *\n   * See also {@link get}.\n   * @param {Client} client\n   * @param {Object} resource Raw instance data, usually the result of a query.\n   * @return {this} An instance of this class.\n   */\n  static getFromResource(client, resource) {\n    const instance = new this(client)\n    instance._initFromResource(resource)\n    return instance\n  }\n\n  _initFromResource(resource) {\n    if (!(typeof resource === 'object' && resource.constructor === Object))\n      throw new Error('Expected to initialize from plain object resource.')\n    const expectedClass = this.constructor.classRef\n    if (!resource.class.equals(expectedClass))\n      throw new InvalidValue(\n        `Trying to initialize from resource of class ${resource.class}; expected ${expectedClass}`)\n\n    this._original = resource\n    this._initState()\n  }\n\n  _initState() {\n    // New JSON data of the instance.\n    this._current = objectDup(this._original)\n  }\n\n  _diff() {\n    return calculateDiff(this._original, this._current)\n  }\n\n  /**\n   * Paginates a set query and converts results to instances of this class.\n   *\n   * @param {Client} client\n   * @param instanceSet Query set of instances of this class.\n   * @param pageParams Params to {@link paginate}.\n   * @return {Promise<Page<this>>} Page whose elements are instances of this class.\n   */\n  static async page(client, instanceSet, pageParams={}) {\n    return await this._mapPage(client, instanceSet, query.lambda(query.get), pageParams)\n  }\n\n  /**\n   * Calls {@link Index#match} and then works just like {@link page}.\n   *\n   * @param {Index} index\n   * @param matchedValues Values for {@link Index.match}.\n   * @param pageParams Params to {@link query.paginate}.\n   * @return {Promise<Page<this>>} Page whose elements are instances of this class.\n   */\n  static async pageIndex(index, matchedValues, pageParams={}) {\n    if (!(matchedValues instanceof Array))\n      matchedValues = [matchedValues]\n    const client = index.client\n    const matchSet = index.match(...matchedValues)\n    const getter = indexRefGetter(index)\n    return this._mapPage(client, matchSet, getter, pageParams)\n  }\n\n  static async _mapPage(client, instanceSet, pageLambda, pageParams) {\n    const pageQuery = query.paginate(instanceSet, pageParams)\n    const mapQuery = query.map(pageLambda, pageQuery)\n    const page = Page.fromRaw(await client.query(mapQuery))\n    return page.mapData(resource => this.getFromResource(client, resource))\n  }\n\n  /**\n   * Stream for `instanceSet` that converts results to model instances.\n   * @param {Client} client\n   * @param instanceSet Query set of {@link Ref}s to instances of this class.\n   * @param {number} opts.pageSize Size of each page.\n   * @return {PageStream<this>} Stream whose elements are instances of this class.\n   */\n  static stream(client, instanceSet, opts={}) {\n    const {pageSize} = applyDefaults(opts, {\n      pageSize: undefined\n    })\n    return PageStream.elements(client, instanceSet, {\n      pageSize,\n      mapLambda: query.lambda(query.get)\n    }).map(instance => this.getFromResource(client, instance))\n  }\n\n  /**\n   * Calls {@link Index#match} and then works just like {@link pageStream}.\n   *\n   * @param {Index} index Index whose instances are instances of this class.\n   * @param matchedValues Matched value or array of matched values, passed into {@link Index.match}.\n   * @param {number} opts.pageSize Size of each page.\n   * @return {PageStream<this>} Stream whose elements are instances of this class.\n   */\n  static streamIndex(index, matchedValues, opts={}) {\n    const {pageSize} = applyDefaults(opts, {\n      pageSize: undefined\n    })\n    const client = index.client\n    if (!(matchedValues instanceof Array))\n      matchedValues = [matchedValues]\n    const matchSet = index.match(...matchedValues)\n    return PageStream.elements(client, matchSet, {\n      pageSize,\n      mapLambda: indexRefGetter(index)\n    }).map(instance => this.getFromResource(client, instance))\n  }\n\n  /**\n   * Returns the first instance matched by the index.\n   * @param {Index} index\n   * @param matchedValues Same as for {@link Index.match}.\n   * @return {Promise<this>} Instance of this class.\n   */\n  static async getFromIndex(index, ...matchedValues) {\n    return this.getFromResource(index.client, await index.getSingle(...matchedValues))\n  }\n\n  /** @ignore */\n  toString() {\n    const fields = Object.keys(this.constructor.fields).map(key =>\n      `${key}: ${this[key]}`).join(', ')\n    return `${this.constructor.name}(${fields})`\n  }\n}\n\n/** Lambda expression for getting an instance Ref out of a match result. */\nconst indexRefGetter = index =>\n  index.values ?\n    query.lambda(arr => query.get(query.select(index.values.length, arr))) :\n    query.lambda(query.get)\n"
  },
  {
    "__docId__": 113,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Model",
    "memberof": "src/model/Model.js",
    "longname": "src/model/Model.js~Model",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/model/Model.js",
    "importStyle": "Model",
    "description": "Base class for all models.\n\nModels represent database instances.\nThey link a FaunaDB class to a JavaScript class.\n\nThe basic format is:\n\n    class MyModel extends Model {\n      ... your methods ...\n    }\n    // define class name and fields\n    MyModel.setup('my_models', {\n      x: {},\n      y: {converter: new RefConverter(MyModel)}\n    })\n\n{@link Field}s will be constructed and\nproperties will be generated for each field passed to {@link setup}.\n\n{@link Class.createForModel} must be called before you can save model instances.",
    "lineNumber": 31,
    "interface": false
  },
  {
    "__docId__": 114,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "setup",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model.setup",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "faunaClassName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "fields",
        "description": "Each `key: value` pair is the parameters for `addField`."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 115,
    "kind": "member",
    "static": true,
    "variation": null,
    "name": "faunaClassName",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model.faunaClassName",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "member",
    "static": true,
    "variation": null,
    "name": "classRef",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model.classRef",
    "access": null,
    "description": "{@link Ref} for the class itself.\n\n`instance.ref` should be the same as `new Ref(instance.constructor.classRef, instance.id)`.",
    "lineNumber": 44,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "static": true,
    "variation": null,
    "name": "fields",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model.fields",
    "access": null,
    "description": "Object of all fields assigned to this class.",
    "lineNumber": 46,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "addField",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model.addField",
    "access": null,
    "description": "Adds a new field to the class, making getters and setters.",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldName",
        "description": "Name for the field. A getter and setter will be made with this name.\n  If `fieldOpts.path` is not defined, it defaults to `['data', fieldName]`."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldOpts",
        "description": "Parameters for the {@link Field} constructor."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 119,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model#constructor",
    "access": null,
    "description": "Initialize (but do not save) a new instance.",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Fields values for the new instance."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 120,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "client",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model#client",
    "access": null,
    "description": "Client instance that the model uses to save to the database.",
    "lineNumber": 98,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_original",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model#_original",
    "access": null,
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "ref",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model#ref",
    "access": null,
    "description": "{@link Ref} of this instance in the database. `null` if {@link isNewInstance}.",
    "lineNumber": 112,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 123,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "id",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model#id",
    "access": null,
    "description": "The id portion of this instance's {@link Ref}. Fails if {@link isNewInstance}.",
    "lineNumber": 118,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 124,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "ts",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model#ts",
    "access": null,
    "description": "Microsecond UNIX timestamp of the latest {@link save}.\n`null` if {@link isNewInstance}.",
    "lineNumber": 126,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 125,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getEncoded",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model#getEncoded",
    "access": null,
    "description": "For a field with a {@link Converter}, gets the encoded value.",
    "lineNumber": 132,
    "params": [
      {
        "name": "fieldName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 126,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isNewInstance",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model#isNewInstance",
    "access": null,
    "description": "`false` if this has ever been saved to the database.",
    "lineNumber": 138,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 127,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "delete",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model#delete",
    "access": null,
    "description": "Removes this instance from the database.",
    "lineNumber": 146,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 128,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "deleteQuery",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model#deleteQuery",
    "access": null,
    "description": "Query that deletes this instance.",
    "lineNumber": 154,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Object} A {@link delete_expr"
      ],
      "spread": false,
      "description": "expression."
    },
    "generator": false
  },
  {
    "__docId__": 129,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "save",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model#save",
    "access": null,
    "description": "Executes {@link saveQuery}.",
    "lineNumber": 165,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "replace",
        "description": "Same as for {@link saveQuery}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 130,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "saveQuery",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model#saveQuery",
    "access": null,
    "description": "Query to save this instance to the database.\nIf {@link isNewInstance}, creates it and sets `ref` and `ts`.\nOtherwise, updates any changed fields.",
    "lineNumber": 180,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "replace",
        "description": "If true, updates will update *all* fields\n  using {@link replaceQuery} instead of {@link updateQuery}.\n  See the [docs](https://faunadb.com/documentation/queries#write_functions)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A query expression, ready to use with {@link Client#query}."
    },
    "generator": false
  },
  {
    "__docId__": 131,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "createQuery",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model#createQuery",
    "access": null,
    "description": "Query to create a new instance.",
    "lineNumber": 190,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Object} A {@link create"
      ],
      "spread": false,
      "description": "expression."
    },
    "generator": false
  },
  {
    "__docId__": 132,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "replaceQuery",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model#replaceQuery",
    "access": null,
    "description": "Query to replace this instance's data.",
    "lineNumber": 200,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Object} A {@link replace"
      ],
      "spread": false,
      "description": "expression."
    },
    "generator": false
  },
  {
    "__docId__": 133,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "updateQuery",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model#updateQuery",
    "access": null,
    "description": "Query to update this instance's data.",
    "lineNumber": 210,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Object} a {@link update"
      ],
      "spread": false,
      "description": "expression."
    },
    "generator": false
  },
  {
    "__docId__": 134,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "isAbstract",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model.isAbstract",
    "access": null,
    "description": "A Model class is considered abstract if {@link setup} was never called.",
    "lineNumber": 217,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 135,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "get",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model.get",
    "access": null,
    "description": "Gets the instance of this class specified by `ref`.",
    "lineNumber": 227,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Ref"
        ],
        "spread": false,
        "optional": false,
        "name": "ref",
        "description": "Must be a reference to an instance of this class."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<this>"
      ],
      "spread": false,
      "description": "An instance of this class."
    },
    "generator": false
  },
  {
    "__docId__": 136,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "getById",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model.getById",
    "access": null,
    "description": "Gets the instance of this class specified by `id`.",
    "lineNumber": 237,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number",
          "string} instanceId `id` portion of a {@link Ref"
        ],
        "spread": false,
        "optional": false,
        "name": "for",
        "description": "an instance of this class."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<this>"
      ],
      "spread": false,
      "description": "An instance of this class."
    },
    "generator": false
  },
  {
    "__docId__": 137,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "create",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model.create",
    "access": null,
    "description": "Initializes and saves a new instance.",
    "lineNumber": 247,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Field values for the new instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<this>"
      ],
      "spread": false,
      "description": "An instance of this class."
    },
    "generator": false
  },
  {
    "__docId__": 138,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "getFromResource",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model.getFromResource",
    "access": null,
    "description": "Creates a new instance from query results.\n\nSee also {@link get}.",
    "lineNumber": 261,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "resource",
        "description": "Raw instance data, usually the result of a query."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": "An instance of this class."
    },
    "generator": false
  },
  {
    "__docId__": 139,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_initFromResource",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model#_initFromResource",
    "access": null,
    "description": null,
    "lineNumber": 267,
    "undocument": true,
    "params": [
      {
        "name": "resource",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 140,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_original",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model#_original",
    "access": null,
    "description": null,
    "lineNumber": 275,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_initState",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model#_initState",
    "access": null,
    "description": null,
    "lineNumber": 279,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 142,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_current",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model#_current",
    "access": null,
    "description": null,
    "lineNumber": 281,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_diff",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model#_diff",
    "access": null,
    "description": null,
    "lineNumber": 284,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 144,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "page",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model.page",
    "access": null,
    "description": "Paginates a set query and converts results to instances of this class.",
    "lineNumber": 296,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "instanceSet",
        "description": "Query set of instances of this class."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pageParams",
        "description": "Params to {@link paginate}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Page<this>>"
      ],
      "spread": false,
      "description": "Page whose elements are instances of this class."
    },
    "generator": false
  },
  {
    "__docId__": 145,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "pageIndex",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model.pageIndex",
    "access": null,
    "description": "Calls {@link Index#match} and then works just like {@link page}.",
    "lineNumber": 308,
    "params": [
      {
        "nullable": null,
        "types": [
          "Index"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "matchedValues",
        "description": "Values for {@link Index.match}."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pageParams",
        "description": "Params to {@link query.paginate}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Page<this>>"
      ],
      "spread": false,
      "description": "Page whose elements are instances of this class."
    },
    "generator": false
  },
  {
    "__docId__": 146,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "_mapPage",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model._mapPage",
    "access": null,
    "description": null,
    "lineNumber": 317,
    "undocument": true,
    "params": [
      {
        "name": "client",
        "types": [
          "*"
        ]
      },
      {
        "name": "instanceSet",
        "types": [
          "*"
        ]
      },
      {
        "name": "pageLambda",
        "types": [
          "*"
        ]
      },
      {
        "name": "pageParams",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 147,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "stream",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model.stream",
    "access": null,
    "description": "Stream for `instanceSet` that converts results to model instances.",
    "lineNumber": 331,
    "params": [
      {
        "nullable": null,
        "types": [
          "Client"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "instanceSet",
        "description": "Query set of {@link Ref}s to instances of this class."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "opts.pageSize",
        "description": "Size of each page."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PageStream<this>"
      ],
      "spread": false,
      "description": "Stream whose elements are instances of this class."
    },
    "generator": false
  },
  {
    "__docId__": 148,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "streamIndex",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model.streamIndex",
    "access": null,
    "description": "Calls {@link Index#match} and then works just like {@link pageStream}.",
    "lineNumber": 349,
    "params": [
      {
        "nullable": null,
        "types": [
          "Index"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "Index whose instances are instances of this class."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "matchedValues",
        "description": "Matched value or array of matched values, passed into {@link Index.match}."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "opts.pageSize",
        "description": "Size of each page."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PageStream<this>"
      ],
      "spread": false,
      "description": "Stream whose elements are instances of this class."
    },
    "generator": false
  },
  {
    "__docId__": 149,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "getFromIndex",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model.getFromIndex",
    "access": null,
    "description": "Returns the first instance matched by the index.",
    "lineNumber": 369,
    "params": [
      {
        "nullable": null,
        "types": [
          "Index"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "matchedValues",
        "description": "Same as for {@link Index.match}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<this>"
      ],
      "spread": false,
      "description": "Instance of this class."
    },
    "generator": false
  },
  {
    "__docId__": 150,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/model/Model.js~Model",
    "longname": "src/model/Model.js~Model#toString",
    "access": null,
    "description": null,
    "lineNumber": 374,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "indexRefGetter",
    "memberof": "src/model/Model.js",
    "longname": "src/model/Model.js~indexRefGetter",
    "access": null,
    "export": false,
    "importPath": "faunadb/src/model/Model.js",
    "importStyle": null,
    "description": "Lambda expression for getting an instance Ref out of a match result.",
    "lineNumber": 382,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/objects.js",
    "memberof": null,
    "longname": "src/objects.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {InvalidQuery, InvalidValue} from './errors'\n\n/**\n * FaunaDB ref.\n * See the [docs](https://faunadb.com/documentation/queries#values-special_types).\n *\n * A simple wrapper around a string which can be extracted using `ref.value`.\n * Queries that require a Ref will not work if you just pass in a string.\n */\nexport class Ref {\n  /**\n   * Create a Ref from a string, such as `new Ref('databases/prydain')`.\n   * Can also call `new Ref('databases', 'prydain')` or `new Ref(new Ref('databases'), 'prydain').\n   */\n  constructor() {\n    const parts = Array.prototype.slice.call(arguments)\n    /** Raw string value. */\n    this.value = parts.join('/')\n  }\n\n  /**\n   * Gets the class part out of the Ref.\n   * This is done by removing the id.\n   * So `new Ref('a', 'b/c').class` will be `new Ref('a/b')`.\n   */\n  get class() {\n    const parts = this.value.split('/')\n    if (parts.length === 1)\n      return this\n    else\n      return new Ref(parts.slice(0, parts.length - 1).join('/'))\n  }\n\n  /**\n   * Removes the class part of the Ref, leaving only the id.\n   * this is everything after the last `/`.\n   */\n  get id() {\n    const parts = this.value.split('/')\n    if (parts.length === 1)\n      throw new InvalidValue('The Ref does not have an id.')\n    return parts[parts.length - 1]\n  }\n\n  /** @ignore */\n  toJSON() {\n    return {'@ref': this.value}\n  }\n\n  /** @ignore */\n  toString() {\n    return this.value\n  }\n\n  /** @ignore */\n  valueOf() {\n    return this.value\n  }\n\n  /** @ignore */\n  inspect() {\n    return `Ref(${JSON.stringify(this.value)})`\n  }\n\n  equals(other) {\n    return other instanceof Ref && this.value === other.value\n  }\n}\n\n/**\n * FaunaDB Set.\n * This represents a set returned as part of a response.\n * This looks like This looks like `{\"@set\": set_query}`.\n * For query sets see {@link match}, {@link union},\n * {@link intersection}, {@link difference}, and {@link join}.\n */\nexport class FaunaSet {\n  constructor(query) {\n    /** Raw query object. */\n    this.query = query\n  }\n\n  /** @ignore */\n  inspect() {\n    return `FaunaSet(${JSON.stringify(this.value)})`\n  }\n\n  /** @ignore */\n  toJSON() {\n    return {'@set': this.query}\n  }\n}\n\n/**\n * FaunaDB Event.\n * See the [docs](https://faunadb.com/documentation/queries#values).\n */\nexport class Event {\n  /**\n   * Events are not automatically converted.\n   * Use this on an object that you know represents an Event.\n   */\n  static fromRaw(object) {\n    return new Event(object.ts, object.action, object.resource)\n  }\n\n  constructor(ts, action, resource) {\n    /** Microsecond UNIX timestamp at which the event occured. */\n    this.ts = ts\n    if (!allowed_event_actions.has(action))\n      throw new InvalidQuery('Action must be create or delete or null.')\n    if (action !== null)\n      /** 'create' or 'delete' */\n      this.action = action\n    if (resource !== null)\n      /** The {@link Ref} of the affected instance. */\n      this.resource = resource\n  }\n}\nconst allowed_event_actions = new Set([null, 'create', 'delete'])\n\n/**\n * A single pagination result.\n * See `paginate` in the [docs](https://faunadb.com/documentation/queries#read_functions).\n */\nexport class Page {\n  static fromRaw(object) {\n    return new Page(object.data, object.before, object.after)\n  }\n\n  constructor(data, before, after) {\n    /**\n     * Always a list.\n     * Elements could be raw data; some methods may convert data.\n     */\n    this.data = data\n    /** Optional {@link Ref} for an instance that comes before this page. */\n    this.before = before\n    /** Optional {@link Ref} for an instance that comes after this page. */\n    this.after = after\n  }\n\n  /** Return a new Page whose data has had `func` applied to each element. */\n  mapData(func) {\n    return new Page(this.data.map(func), this.before, this.after)\n  }\n}\n"
  },
  {
    "__docId__": 153,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Ref",
    "memberof": "src/objects.js",
    "longname": "src/objects.js~Ref",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/objects.js",
    "importStyle": "{Ref}",
    "description": "FaunaDB ref.\nSee the [docs](https://faunadb.com/documentation/queries#values-special_types).\n\nA simple wrapper around a string which can be extracted using `ref.value`.\nQueries that require a Ref will not work if you just pass in a string.",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 154,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/objects.js~Ref",
    "longname": "src/objects.js~Ref#constructor",
    "access": null,
    "description": "Create a Ref from a string, such as `new Ref('databases/prydain')`.\nCan also call `new Ref('databases', 'prydain')` or `new Ref(new Ref('databases'), 'prydain').",
    "lineNumber": 15,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 155,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "src/objects.js~Ref",
    "longname": "src/objects.js~Ref#value",
    "access": null,
    "description": "Raw string value.",
    "lineNumber": 18,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "class",
    "memberof": "src/objects.js~Ref",
    "longname": "src/objects.js~Ref#class",
    "access": null,
    "description": "Gets the class part out of the Ref.\nThis is done by removing the id.\nSo `new Ref('a', 'b/c').class` will be `new Ref('a/b')`.",
    "lineNumber": 26,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 157,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "id",
    "memberof": "src/objects.js~Ref",
    "longname": "src/objects.js~Ref#id",
    "access": null,
    "description": "Removes the class part of the Ref, leaving only the id.\nthis is everything after the last `/`.",
    "lineNumber": 38,
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 158,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toJSON",
    "memberof": "src/objects.js~Ref",
    "longname": "src/objects.js~Ref#toJSON",
    "access": null,
    "description": null,
    "lineNumber": 46,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 159,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/objects.js~Ref",
    "longname": "src/objects.js~Ref#toString",
    "access": null,
    "description": null,
    "lineNumber": 51,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 160,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "valueOf",
    "memberof": "src/objects.js~Ref",
    "longname": "src/objects.js~Ref#valueOf",
    "access": null,
    "description": null,
    "lineNumber": 56,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 161,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "inspect",
    "memberof": "src/objects.js~Ref",
    "longname": "src/objects.js~Ref#inspect",
    "access": null,
    "description": null,
    "lineNumber": 61,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 162,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "equals",
    "memberof": "src/objects.js~Ref",
    "longname": "src/objects.js~Ref#equals",
    "access": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 163,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "FaunaSet",
    "memberof": "src/objects.js",
    "longname": "src/objects.js~FaunaSet",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/objects.js",
    "importStyle": "{FaunaSet}",
    "description": "FaunaDB Set.\nThis represents a set returned as part of a response.\nThis looks like This looks like `{\"@set\": set_query}`.\nFor query sets see {@link match}, {@link union},\n{@link intersection}, {@link difference}, and {@link join}.",
    "lineNumber": 77,
    "interface": false
  },
  {
    "__docId__": 164,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/objects.js~FaunaSet",
    "longname": "src/objects.js~FaunaSet#constructor",
    "access": null,
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 165,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "query",
    "memberof": "src/objects.js~FaunaSet",
    "longname": "src/objects.js~FaunaSet#query",
    "access": null,
    "description": "Raw query object.",
    "lineNumber": 80,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "inspect",
    "memberof": "src/objects.js~FaunaSet",
    "longname": "src/objects.js~FaunaSet#inspect",
    "access": null,
    "description": null,
    "lineNumber": 84,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 167,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toJSON",
    "memberof": "src/objects.js~FaunaSet",
    "longname": "src/objects.js~FaunaSet#toJSON",
    "access": null,
    "description": null,
    "lineNumber": 89,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 168,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Event",
    "memberof": "src/objects.js",
    "longname": "src/objects.js~Event",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/objects.js",
    "importStyle": "{Event}",
    "description": "FaunaDB Event.\nSee the [docs](https://faunadb.com/documentation/queries#values).",
    "lineNumber": 98,
    "interface": false
  },
  {
    "__docId__": 169,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "fromRaw",
    "memberof": "src/objects.js~Event",
    "longname": "src/objects.js~Event.fromRaw",
    "access": null,
    "description": "Events are not automatically converted.\nUse this on an object that you know represents an Event.",
    "lineNumber": 103,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 170,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/objects.js~Event",
    "longname": "src/objects.js~Event#constructor",
    "access": null,
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [
      {
        "name": "ts",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      },
      {
        "name": "resource",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 171,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ts",
    "memberof": "src/objects.js~Event",
    "longname": "src/objects.js~Event#ts",
    "access": null,
    "description": "Microsecond UNIX timestamp at which the event occured.",
    "lineNumber": 109,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "action",
    "memberof": "src/objects.js~Event",
    "longname": "src/objects.js~Event#action",
    "access": null,
    "description": "'create' or 'delete'",
    "lineNumber": 114,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "resource",
    "memberof": "src/objects.js~Event",
    "longname": "src/objects.js~Event#resource",
    "access": null,
    "description": "The {@link Ref} of the affected instance.",
    "lineNumber": 117,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "allowed_event_actions",
    "memberof": "src/objects.js",
    "longname": "src/objects.js~allowed_event_actions",
    "access": null,
    "export": false,
    "importPath": "faunadb/src/objects.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "type": {
      "types": [
        "Set"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Page",
    "memberof": "src/objects.js",
    "longname": "src/objects.js~Page",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/objects.js",
    "importStyle": "{Page}",
    "description": "A single pagination result.\nSee `paginate` in the [docs](https://faunadb.com/documentation/queries#read_functions).",
    "lineNumber": 126,
    "interface": false
  },
  {
    "__docId__": 176,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "fromRaw",
    "memberof": "src/objects.js~Page",
    "longname": "src/objects.js~Page.fromRaw",
    "access": null,
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 177,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/objects.js~Page",
    "longname": "src/objects.js~Page#constructor",
    "access": null,
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "before",
        "types": [
          "*"
        ]
      },
      {
        "name": "after",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 178,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "data",
    "memberof": "src/objects.js~Page",
    "longname": "src/objects.js~Page#data",
    "access": null,
    "description": "Always a list.\nElements could be raw data; some methods may convert data.",
    "lineNumber": 136,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "before",
    "memberof": "src/objects.js~Page",
    "longname": "src/objects.js~Page#before",
    "access": null,
    "description": "Optional {@link Ref} for an instance that comes before this page.",
    "lineNumber": 138,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "after",
    "memberof": "src/objects.js~Page",
    "longname": "src/objects.js~Page#after",
    "access": null,
    "description": "Optional {@link Ref} for an instance that comes after this page.",
    "lineNumber": 140,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "mapData",
    "memberof": "src/objects.js~Page",
    "longname": "src/objects.js~Page#mapData",
    "access": null,
    "description": "Return a new Page whose data has had `func` applied to each element.",
    "lineNumber": 144,
    "params": [
      {
        "name": "func",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 182,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/query.js",
    "memberof": null,
    "longname": "src/query.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/** See the [docs](https://faunadb.com/documentation/queries#basic_forms). */\nexport function let_expr(vars, in_expr) {\n  return {let: vars, in: in_expr}\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#basic_form). */\nexport function variable(varName) {\n  return {var: varName}\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#basic_forms). */\nexport function if_expr(condition, true_expr, false_expr) {\n  return {if: condition, then: true_expr, else: false_expr}\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#basic_form). */\nexport function do_expr(...expressions) {\n  return varargsQuery('do', expressions)\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#basic_forms). */\nexport function object(object) {\n  return {object}\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#basic_forms). */\nexport function quote(quote) {\n  return {quote}\n}\n\nlet lambdaAutoVarName = 'a'\n\n/**\n * See the [docs](https://faunadb.com/documentation/queries#basic_forms).\n * This form generates the names of lambda parameters for you, and is called like:\n *\n *     query.lambda(a => query.add(a, a))\n *     // Produces: {lambda: 'a', expr: {add: [{var: 'a'}, {var: 'a'}]}}\n *\n * You can also use {@link lambda_expr} directly.\n *\n * @param {function} lambda_body Takes a variable and uses it to construct an expression.\n */\nexport function lambda(lambda_body) {\n  const varName = lambdaAutoVarName\n  // Move var name for inner closures from 'a' to 'b', or 'b' to 'c', etc.\n  lambdaAutoVarName = String.fromCharCode(lambdaAutoVarName.charCodeAt(0) + 1)\n\n  // Make sure lambdaVarName returns to its former value even if there are errors.\n  try {\n    return lambda_expr(varName, lambda_body(variable(varName)))\n  } finally {\n    lambdaAutoVarName = varName\n  }\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#basic_forms). */\nexport function lambda_expr(var_name, expr) {\n  return {lambda: var_name, expr}\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#collection_functions). */\nexport function map(lambda_expr, collection) {\n  return {map: lambda_expr, collection}\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#collection_functions). */\nexport function foreach(lambda_expr, collection) {\n  return {foreach: lambda_expr, collection}\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#read_functions). */\nexport function get(ref, ts=null) {\n  return params({get: ref}, {ts})\n}\n\n/**\n * See the [docs](https://faunadb.com/documentation/queries#read_functions).\n * You may want to convert the result of this to a {@link Page}.\n */\nexport function paginate(set, opts={}) {\n  return Object.assign({paginate: set}, opts)\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#read_functions). */\nexport function exists(ref, ts=null) {\n  return params({exists: ref}, {ts})\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#read_functions). */\nexport function count(set, events=null) {\n  return params({count: set}, {events})\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#write_functions). */\nexport function create(class_ref, params) {\n  return {create: class_ref, params}\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#write_functions). */\nexport function update(ref, params) {\n  return {update: ref, params}\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#write_functions). */\nexport function replace(ref, params) {\n  return {replace: ref, params}\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#write_functions). */\nexport function delete_expr(ref) {\n  return {delete: ref}\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#sets). */\nexport function match(match, index) {\n  return {match, index}\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#sets). */\nexport function union(...sets) {\n  return varargsQuery('union', sets)\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#sets). */\nexport function intersection(...sets) {\n  return varargsQuery('intersection', sets)\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#sets). */\nexport function difference(...sets) {\n  return varargsQuery('difference', sets)\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#sets). */\nexport function join(source, target) {\n  return {join: source, with: target}\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#misc_functions). */\nexport function equals(...values) {\n  return varargsQuery('equals', values)\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#misc_functions). */\nexport function concat(...strings) {\n  return varargsQuery('concat', strings)\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#misc_functions). */\nexport function contains(path, value) {\n  return {contains: path, in: value}\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#misc_functions). */\nexport function select(path, data) {\n  return {select: path, from: data}\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#misc_functions). */\nexport function selectWithDefault(path, data, _default) {\n  return {select: path, from: data, default: _default}\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#misc_functions). */\nexport function add(...numbers) {\n  return varargsQuery('add', numbers)\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#misc_functions). */\nexport function multiply(...numbers) {\n  return varargsQuery('multiply', numbers)\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#misc_functions). */\nexport function subtract(...numbers) {\n  return varargsQuery('subtract', numbers)\n}\n\n/** See the [docs](https://faunadb.com/documentation/queries#misc_functions). */\nexport function divide(...numbers) {\n  return varargsQuery('divide', numbers)\n}\n\nconst\n  params = (mainParams, optionalParams) => {\n    for (const key in optionalParams) {\n      const val = optionalParams[key]\n      if (val !== null)\n        mainParams[key] = val\n    }\n    return mainParams\n  },\n\n  varargsQuery = (name, values) =>\n    ({[name]: values.length === 1 ? values[0] : values})\n"
  },
  {
    "__docId__": 183,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "let_expr",
    "memberof": "src/query.js",
    "longname": "src/query.js~let_expr",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{let_expr}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#basic_forms).",
    "lineNumber": 2,
    "params": [
      {
        "name": "vars",
        "types": [
          "*"
        ]
      },
      {
        "name": "in_expr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 184,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "variable",
    "memberof": "src/query.js",
    "longname": "src/query.js~variable",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{variable}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#basic_form).",
    "lineNumber": 7,
    "params": [
      {
        "name": "varName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 185,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "if_expr",
    "memberof": "src/query.js",
    "longname": "src/query.js~if_expr",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{if_expr}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#basic_forms).",
    "lineNumber": 12,
    "params": [
      {
        "name": "condition",
        "types": [
          "*"
        ]
      },
      {
        "name": "true_expr",
        "types": [
          "*"
        ]
      },
      {
        "name": "false_expr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 186,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "do_expr",
    "memberof": "src/query.js",
    "longname": "src/query.js~do_expr",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{do_expr}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#basic_form).",
    "lineNumber": 17,
    "params": [
      {
        "name": "expressions",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 187,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "object",
    "memberof": "src/query.js",
    "longname": "src/query.js~object",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{object}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#basic_forms).",
    "lineNumber": 22,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 188,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "quote",
    "memberof": "src/query.js",
    "longname": "src/query.js~quote",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{quote}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#basic_forms).",
    "lineNumber": 27,
    "params": [
      {
        "name": "quote",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 189,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "lambdaAutoVarName",
    "memberof": "src/query.js",
    "longname": "src/query.js~lambdaAutoVarName",
    "access": null,
    "export": false,
    "importPath": "faunadb/src/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "lambda",
    "memberof": "src/query.js",
    "longname": "src/query.js~lambda",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{lambda}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#basic_forms).\nThis form generates the names of lambda parameters for you, and is called like:\n\n    query.lambda(a => query.add(a, a))\n    // Produces: {lambda: 'a', expr: {add: [{var: 'a'}, {var: 'a'}]}}\n\nYou can also use {@link lambda_expr} directly.",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "lambda_body",
        "description": "Takes a variable and uses it to construct an expression."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 191,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "lambda_expr",
    "memberof": "src/query.js",
    "longname": "src/query.js~lambda_expr",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{lambda_expr}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#basic_forms).",
    "lineNumber": 58,
    "params": [
      {
        "name": "var_name",
        "types": [
          "*"
        ]
      },
      {
        "name": "expr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 192,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "map",
    "memberof": "src/query.js",
    "longname": "src/query.js~map",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{map}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#collection_functions).",
    "lineNumber": 63,
    "params": [
      {
        "name": "lambda_expr",
        "types": [
          "*"
        ]
      },
      {
        "name": "collection",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 193,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "foreach",
    "memberof": "src/query.js",
    "longname": "src/query.js~foreach",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{foreach}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#collection_functions).",
    "lineNumber": 68,
    "params": [
      {
        "name": "lambda_expr",
        "types": [
          "*"
        ]
      },
      {
        "name": "collection",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 194,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "get",
    "memberof": "src/query.js",
    "longname": "src/query.js~get",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{get}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#read_functions).",
    "lineNumber": 73,
    "params": [
      {
        "name": "ref",
        "types": [
          "*"
        ]
      },
      {
        "name": "ts",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 195,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "paginate",
    "memberof": "src/query.js",
    "longname": "src/query.js~paginate",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{paginate}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#read_functions).\nYou may want to convert the result of this to a {@link Page}.",
    "lineNumber": 81,
    "params": [
      {
        "name": "set",
        "types": [
          "*"
        ]
      },
      {
        "name": "opts",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 196,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "exists",
    "memberof": "src/query.js",
    "longname": "src/query.js~exists",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{exists}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#read_functions).",
    "lineNumber": 86,
    "params": [
      {
        "name": "ref",
        "types": [
          "*"
        ]
      },
      {
        "name": "ts",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 197,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "count",
    "memberof": "src/query.js",
    "longname": "src/query.js~count",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{count}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#read_functions).",
    "lineNumber": 91,
    "params": [
      {
        "name": "set",
        "types": [
          "*"
        ]
      },
      {
        "name": "events",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": null,
        "defaultValue": "null"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 198,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "create",
    "memberof": "src/query.js",
    "longname": "src/query.js~create",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{create}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#write_functions).",
    "lineNumber": 96,
    "params": [
      {
        "name": "class_ref",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 199,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "update",
    "memberof": "src/query.js",
    "longname": "src/query.js~update",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{update}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#write_functions).",
    "lineNumber": 101,
    "params": [
      {
        "name": "ref",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 200,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "replace",
    "memberof": "src/query.js",
    "longname": "src/query.js~replace",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{replace}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#write_functions).",
    "lineNumber": 106,
    "params": [
      {
        "name": "ref",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 201,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "delete_expr",
    "memberof": "src/query.js",
    "longname": "src/query.js~delete_expr",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{delete_expr}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#write_functions).",
    "lineNumber": 111,
    "params": [
      {
        "name": "ref",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 202,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "match",
    "memberof": "src/query.js",
    "longname": "src/query.js~match",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{match}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#sets).",
    "lineNumber": 116,
    "params": [
      {
        "name": "match",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 203,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "union",
    "memberof": "src/query.js",
    "longname": "src/query.js~union",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{union}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#sets).",
    "lineNumber": 121,
    "params": [
      {
        "name": "sets",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 204,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "intersection",
    "memberof": "src/query.js",
    "longname": "src/query.js~intersection",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{intersection}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#sets).",
    "lineNumber": 126,
    "params": [
      {
        "name": "sets",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 205,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "difference",
    "memberof": "src/query.js",
    "longname": "src/query.js~difference",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{difference}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#sets).",
    "lineNumber": 131,
    "params": [
      {
        "name": "sets",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 206,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "join",
    "memberof": "src/query.js",
    "longname": "src/query.js~join",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{join}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#sets).",
    "lineNumber": 136,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 207,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "equals",
    "memberof": "src/query.js",
    "longname": "src/query.js~equals",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{equals}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#misc_functions).",
    "lineNumber": 141,
    "params": [
      {
        "name": "values",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 208,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "concat",
    "memberof": "src/query.js",
    "longname": "src/query.js~concat",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{concat}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#misc_functions).",
    "lineNumber": 146,
    "params": [
      {
        "name": "strings",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 209,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "contains",
    "memberof": "src/query.js",
    "longname": "src/query.js~contains",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{contains}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#misc_functions).",
    "lineNumber": 151,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 210,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "select",
    "memberof": "src/query.js",
    "longname": "src/query.js~select",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{select}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#misc_functions).",
    "lineNumber": 156,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 211,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "selectWithDefault",
    "memberof": "src/query.js",
    "longname": "src/query.js~selectWithDefault",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{selectWithDefault}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#misc_functions).",
    "lineNumber": 161,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "_default",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 212,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "add",
    "memberof": "src/query.js",
    "longname": "src/query.js~add",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{add}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#misc_functions).",
    "lineNumber": 166,
    "params": [
      {
        "name": "numbers",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 213,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "multiply",
    "memberof": "src/query.js",
    "longname": "src/query.js~multiply",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{multiply}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#misc_functions).",
    "lineNumber": 171,
    "params": [
      {
        "name": "numbers",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 214,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "subtract",
    "memberof": "src/query.js",
    "longname": "src/query.js~subtract",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{subtract}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#misc_functions).",
    "lineNumber": 176,
    "params": [
      {
        "name": "numbers",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 215,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "divide",
    "memberof": "src/query.js",
    "longname": "src/query.js~divide",
    "access": null,
    "export": true,
    "importPath": "faunadb/src/query.js",
    "importStyle": "{divide}",
    "description": "See the [docs](https://faunadb.com/documentation/queries#misc_functions).",
    "lineNumber": 181,
    "params": [
      {
        "name": "numbers",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 216,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "params",
    "memberof": "src/query.js",
    "longname": "src/query.js~params",
    "access": null,
    "export": false,
    "importPath": "faunadb/src/query.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 185,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 219,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 220,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 221,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 222,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 223,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 224,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 225,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 226,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 227,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 228,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 229,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 230,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 231,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 232,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 233,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 234,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 235,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 236,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 237,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 238,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 239,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 240,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 241,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 242,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 243,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 244,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 245,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 246,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 247,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 248,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 249,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 250,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 251,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 252,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 253,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 254,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 255,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 256,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 257,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 258,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 259,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 260,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 261,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 262,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 263,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 264,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 266,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 267,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 268,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 269,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 270,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 271,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 272,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 273,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/client_test.js",
    "memberof": null,
    "longname": "test/client_test.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {assert} from 'chai'\nimport Stream from 'stream'\nimport {Logger, transports} from 'winston'\nimport {NotFound, Unauthorized} from '../src/errors'\nimport {assertRejected, client, clientSecret, dbRef, getClient} from './util'\n\nlet cls\n\ndescribe('Client', () => {\n  before(async function() {\n    cls = await client.post('classes', {name: 'my_class'})\n  })\n\n  it('invalid key', async function() {\n    const client = getClient({secret: {user: 'bad_key'}})\n    await assertRejected(client.get(dbRef), Unauthorized)\n  })\n\n  it('ping', async function() {\n    const tests = {\n      global: 'Scope Global is OK',\n      local: 'Scope Local is OK',\n      node: 'Scope Node is OK',\n      all: 'Scope All is OK'\n    }\n    assert.equal(await client.ping(), 'Scope Global is OK')\n    for (const key in tests)\n      assert.equal(await client.ping(key), tests[key])\n  })\n\n  it('get', async function() {\n    const classes = await client.get('classes')\n    assert.instanceOf(classes.data, Array)\n  })\n\n  it('post', async function() {\n    assert.deepEqual(await client.get(cls.ref), cls)\n  })\n\n  it('put', async function() {\n    let instance = await createInstance()\n\n    instance = await client.put(instance.ref, {data: {a: 2}})\n    assert.equal(instance.data.a, 2)\n\n    instance = await client.put(instance.ref, {data: {b: 3}})\n    assert.isFalse('a' in instance.data)\n    assert.deepEqual(instance.data.b, 3)\n  })\n\n  it('patch', async function() {\n    let instance = await createInstance()\n    instance = await client.patch(instance.ref, {data: {a: 1}})\n    instance = await client.patch(instance.ref, {data: {b: 2}})\n    assert.deepEqual(instance.data, {a: 1, b: 2})\n  })\n\n  it('delete', async function() {\n    const instance = await createInstance()\n    await client.delete(instance.ref)\n    await assertRejected(client.get(instance.ref), NotFound)\n  })\n\n  it('logger', async function() {\n    const logs = await captureLogs(client => client.ping())\n    assert.equal(logs[0], 'Fauna GET /ping')\n    assert.equal(logs[1], `  Credentials: {\"user\":\"${clientSecret.user}\"}`)\n    assert(logs[2].startsWith('  Response headers: {'))\n    assert.equal(logs[3], `  Response JSON: {\n    \"resource\": \"Scope Global is OK\"\n  }`)\n    assert.match(logs[4], /^  Response \\(200\\): API processing \\d+ms, network latency \\d+ms$/)\n    assert.equal(logs.length, 5)\n  })\n\n  it('logger_no_auth', async function() {\n    const logs = await captureLogs(client => client.ping(), {secret: null})\n    assert.equal(logs[1], '  Credentials: null')\n  })\n})\n\nconst createInstance = () => client.post('classes/my_class', {})\n\nasync function captureLogs(doWithClient, clientOpts={}) {\n  const stream = new TestStream()\n  const logger = new Logger({transports: [new transports.File({stream})]})\n  const client = getClient(Object.assign({logger}, clientOpts))\n  await doWithClient(client)\n  return stream.end()\n}\n\nclass TestStream extends Stream {\n  constructor() {\n    super()\n    this.chunks = []\n  }\n\n  write(chunk) {\n    this.chunks.push(chunk)\n  }\n\n  end() {\n    return this.chunks.map(str => JSON.parse(str).message)\n  }\n}\n"
  },
  {
    "__docId__": 274,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe0",
    "testId": 0,
    "memberof": "test/client_test.js",
    "testDepth": 0,
    "longname": "test/client_test.js~describe0",
    "access": null,
    "description": "Client",
    "lineNumber": 9
  },
  {
    "__docId__": 275,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it1",
    "testId": 1,
    "memberof": "test/client_test.js~describe0",
    "testDepth": 1,
    "longname": "test/client_test.js~describe0.it1",
    "access": null,
    "description": "invalid key",
    "lineNumber": 14
  },
  {
    "__docId__": 276,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it2",
    "testId": 2,
    "memberof": "test/client_test.js~describe0",
    "testDepth": 1,
    "longname": "test/client_test.js~describe0.it2",
    "access": null,
    "description": "ping",
    "lineNumber": 19
  },
  {
    "__docId__": 277,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it3",
    "testId": 3,
    "memberof": "test/client_test.js~describe0",
    "testDepth": 1,
    "longname": "test/client_test.js~describe0.it3",
    "access": null,
    "description": "get",
    "lineNumber": 31
  },
  {
    "__docId__": 278,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it4",
    "testId": 4,
    "memberof": "test/client_test.js~describe0",
    "testDepth": 1,
    "longname": "test/client_test.js~describe0.it4",
    "access": null,
    "description": "post",
    "lineNumber": 36
  },
  {
    "__docId__": 279,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it5",
    "testId": 5,
    "memberof": "test/client_test.js~describe0",
    "testDepth": 1,
    "longname": "test/client_test.js~describe0.it5",
    "access": null,
    "description": "put",
    "lineNumber": 40
  },
  {
    "__docId__": 280,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it6",
    "testId": 6,
    "memberof": "test/client_test.js~describe0",
    "testDepth": 1,
    "longname": "test/client_test.js~describe0.it6",
    "access": null,
    "description": "patch",
    "lineNumber": 51
  },
  {
    "__docId__": 281,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it7",
    "testId": 7,
    "memberof": "test/client_test.js~describe0",
    "testDepth": 1,
    "longname": "test/client_test.js~describe0.it7",
    "access": null,
    "description": "delete",
    "lineNumber": 58
  },
  {
    "__docId__": 282,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it8",
    "testId": 8,
    "memberof": "test/client_test.js~describe0",
    "testDepth": 1,
    "longname": "test/client_test.js~describe0.it8",
    "access": null,
    "description": "logger",
    "lineNumber": 64
  },
  {
    "__docId__": 283,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it9",
    "testId": 9,
    "memberof": "test/client_test.js~describe0",
    "testDepth": 1,
    "longname": "test/client_test.js~describe0.it9",
    "access": null,
    "description": "logger_no_auth",
    "lineNumber": 76
  },
  {
    "__docId__": 284,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/model/builtin_test.js",
    "memberof": null,
    "longname": "test/model/builtin_test.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {assert} from 'chai'\nimport {assertRejected, client, dbRef, rootClient} from '../util'\nimport {BadRequest, NotFound} from '../../src/errors'\nimport {Class, ClassIndex, Database, Index, Key} from '../../src/model/Builtin'\nimport Model from '../../src/model/Model'\nimport {Ref} from '../../src/objects'\nimport * as query from '../../src/query'\n\nlet MyModel\n\ndescribe('Builtin', () => {\n  before(async function() {\n    MyModel = class MyModel extends Model {}\n    MyModel.setup('bananas', {x: {}})\n    await Class.createForModel(client, MyModel)\n  })\n\n  it('database', async function() {\n    const name = 'builtin_test_database'\n    const db = new Database(rootClient, {name, api_version:'2.0'})\n    assert.equal(db.name, name)\n    assert.equal(db.api_version, '2.0')\n\n    await db.save()\n    assert.isFalse(db.isNewInstance())\n    const ref = db.ref\n    assert.deepEqual(ref, new Ref('databases', name))\n\n    await db.delete()\n\n    // TODO: see test 'database existence'.\n    assertRejected(() => rootClient.get(ref), NotFound)\n  })\n\n  // See core issue #1975.\n  if (false)\n    it('database existence', async function() {\n      assert.isFalse(await rootClient.query(\n        query.exists(new Ref('databases', 'not_a_real_database_name'))))\n    })\n\n  it('key', async function() {\n    const database = await Database.get(rootClient, dbRef)\n    const key = new Key(rootClient, {database: database.ref, role: 'server'})\n    await key.save()\n    assert.isFalse(key.isNewInstance())\n    assert(key.hashed_secret.length > 0)\n  })\n\n  it('custom field', async function() {\n    const database = await Database.get(rootClient, dbRef)\n    Key.addField('x')\n    const key = new Key(rootClient, {database: database.ref, role: 'server', x: 3})\n    await key.save()\n    assert.equal((await Key.get(rootClient, key.ref)).x, 3)\n  })\n\n  it('class', async function() {\n    const cls = await Class.getForModel(client, MyModel)\n    assert.isFalse(cls.isNewInstance())\n    assert(cls.history_days > 0)\n    assert.equal(cls.name, MyModel.faunaClassName)\n\n    cls.permissions = 'public'\n    await cls.save()\n\n    assert.equal(cls.permissions, 'public')\n    assert.equal((await Class.getForModel(client, MyModel)).permissions, 'public')\n  })\n\n  it('index', async function() {\n    const idx = await Index.createForModel(client, MyModel, 'mooses_by_x', 'x')\n    assert.deepEqual(await Index.getById(client, 'mooses_by_x'), idx)\n\n    const instance1 = await MyModel.create(client, {x: 1})\n    await MyModel.create(client, {x: 2})\n    const instance2 = await MyModel.create(client, {x: 1})\n\n    assert.deepEqual((await MyModel.pageIndex(idx, 1)).data, [instance1, instance2])\n\n    const all = await MyModel.streamIndex(idx, 1).all()\n    assert.deepEqual(all, [instance1, instance2])\n  })\n\n  it('terms and values', async function() {\n    class D extends Model {}\n    D.setup('ds', {x: {}, y: {}})\n    await Class.createForModel(client, D)\n\n    const idx = await Index.createForModel(\n      client,\n      D,\n      'ds_by_x_y',\n      [{path: 'data.x'}, {path: 'data.y'}])\n\n    const d11 = await D.create(client, {x: 1, y: 1})\n    await D.create(client, {x: 1, y: 2})\n    await D.create(client, {x: 2, y: 1})\n\n    assert.deepEqual((await D.pageIndex(idx, [1, 1])).data, [d11])\n  })\n\n  it('values', async function() {\n    class E extends Model {}\n    E.setup('es', {x: {}, y: {}, z: {}})\n    await Class.createForModel(client, E)\n\n    const index = await Index.createForModel(client, E, 'es_by_x_sorted', 'x', {\n      values: [{path: 'data.y'}, {path: 'data.z', reverse: true}]\n    })\n\n    const es = {}\n    for (let x = 0; x < 2; x = x + 1)\n      for (let y = 0; y < 2; y = y + 1)\n        for (let z = 0; z <  2; z = z + 1)\n          es[`${x}${y}${z}`] = await E.create(client, {x, y, z})\n\n    const expected = ['001', '000', '011', '010'].map(key => es[key])\n\n    assert.deepEqual((await E.pageIndex(index, 0)).data, expected)\n    assert.deepEqual(await E.streamIndex(index, 0).all(), expected)\n  })\n\n  it('unique index', async function() {\n    class F extends Model {}\n    F.setup('fs', {x: {}})\n    await Class.createForModel(client, F)\n\n    const index = await Index.createForModel(client, F, 'fs_by_x', 'x', {unique: true})\n    const instance = await F.create(client, {x: 1})\n    // Unique index, so can't create another one.\n    assertRejected(() => F.create(client, {x: 1}), BadRequest)\n\n    assert.deepEqual(await index.getSingle(1), instance._current)\n    assert.deepEqual(await F.getFromIndex(index, 1), instance)\n    assertRejected(() => index.getSingle(2), NotFound)\n  })\n\n  it('class index', async function() {\n    class M extends Model {}\n    M.setup('test_list_model', {number: {}})\n    await Class.createForModel(client, M)\n\n    const idx = await ClassIndex.createForModel(client, M)\n    assert.deepEqual(await ClassIndex.getForModel(client, M), idx)\n\n    const ms = []\n    for (let i = 0; i < 10; i = i + 1)\n      ms.push(await M.create(client, {number: i}))\n\n    const ms_set = idx.match()\n    const page = await M.page(client, ms_set, {size: 2})\n    assert.deepEqual(page.data, [ms[0], ms[1]])\n    const page2 = await M.page(client, ms_set, {size: 2, after: page.after})\n    assert.deepEqual(page2.data, [ms[2], ms[3]])\n\n    // List of all Ms should be exactly 100 in length\n    const all = await M.streamIndex(idx, 1).all()\n    assert.deepEqual(all, ms)\n  })\n})\n"
  },
  {
    "__docId__": 285,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe10",
    "testId": 10,
    "memberof": "test/model/builtin_test.js",
    "testDepth": 0,
    "longname": "test/model/builtin_test.js~describe10",
    "access": null,
    "description": "Builtin",
    "lineNumber": 11
  },
  {
    "__docId__": 286,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it11",
    "testId": 11,
    "memberof": "test/model/builtin_test.js~describe10",
    "testDepth": 1,
    "longname": "test/model/builtin_test.js~describe10.it11",
    "access": null,
    "description": "database",
    "lineNumber": 18
  },
  {
    "__docId__": 287,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it12",
    "testId": 12,
    "memberof": "test/model/builtin_test.js~describe10",
    "testDepth": 1,
    "longname": "test/model/builtin_test.js~describe10.it12",
    "access": null,
    "description": "database existence",
    "lineNumber": 37
  },
  {
    "__docId__": 288,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it13",
    "testId": 13,
    "memberof": "test/model/builtin_test.js~describe10",
    "testDepth": 1,
    "longname": "test/model/builtin_test.js~describe10.it13",
    "access": null,
    "description": "key",
    "lineNumber": 42
  },
  {
    "__docId__": 289,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it14",
    "testId": 14,
    "memberof": "test/model/builtin_test.js~describe10",
    "testDepth": 1,
    "longname": "test/model/builtin_test.js~describe10.it14",
    "access": null,
    "description": "custom field",
    "lineNumber": 50
  },
  {
    "__docId__": 290,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it15",
    "testId": 15,
    "memberof": "test/model/builtin_test.js~describe10",
    "testDepth": 1,
    "longname": "test/model/builtin_test.js~describe10.it15",
    "access": null,
    "description": "class",
    "lineNumber": 58
  },
  {
    "__docId__": 291,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it16",
    "testId": 16,
    "memberof": "test/model/builtin_test.js~describe10",
    "testDepth": 1,
    "longname": "test/model/builtin_test.js~describe10.it16",
    "access": null,
    "description": "index",
    "lineNumber": 71
  },
  {
    "__docId__": 292,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it17",
    "testId": 17,
    "memberof": "test/model/builtin_test.js~describe10",
    "testDepth": 1,
    "longname": "test/model/builtin_test.js~describe10.it17",
    "access": null,
    "description": "terms and values",
    "lineNumber": 85
  },
  {
    "__docId__": 293,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it18",
    "testId": 18,
    "memberof": "test/model/builtin_test.js~describe10",
    "testDepth": 1,
    "longname": "test/model/builtin_test.js~describe10.it18",
    "access": null,
    "description": "values",
    "lineNumber": 103
  },
  {
    "__docId__": 294,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it19",
    "testId": 19,
    "memberof": "test/model/builtin_test.js~describe10",
    "testDepth": 1,
    "longname": "test/model/builtin_test.js~describe10.it19",
    "access": null,
    "description": "unique index",
    "lineNumber": 124
  },
  {
    "__docId__": 295,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it20",
    "testId": 20,
    "memberof": "test/model/builtin_test.js~describe10",
    "testDepth": 1,
    "longname": "test/model/builtin_test.js~describe10.it20",
    "access": null,
    "description": "class index",
    "lineNumber": 139
  },
  {
    "__docId__": 296,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/model/codec_test.js",
    "memberof": null,
    "longname": "test/model/codec_test.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {assert} from 'chai'\nimport {client} from '../util'\nimport {InvalidValue} from '../../src/errors'\nimport {Ref} from '../../src/objects'\nimport {Class} from '../../src/model/Builtin'\nimport {RefCodec} from '../../src/model/Codec'\nimport Field from '../../src/model/Field'\nimport Model from '../../src/model/Model'\n\nlet MyModel, instance\n\ndescribe('Codec', () => {\n  before(async function() {\n    const DoubleCodec = {\n      encode(value) {\n        return value + value\n      },\n      decode(raw) {\n        const half = raw.length / 2\n        assert.equal(raw.slice(0, half), raw.slice(half))\n        return raw.slice(0, half)\n      }\n    }\n\n    MyModel = class MyModel extends Model { }\n    MyModel.setup('pikachus', {\n      plainField: {},\n      codecField: {codec: DoubleCodec},\n      refField: {codec: RefCodec}\n    })\n    await Class.createForModel(client, MyModel)\n\n    instance = new MyModel(client, {plainField: 1, codecField: 'doubleme'})\n  })\n\n  it('model fields', () => {\n    class MyModel extends Model {}\n    MyModel.setup('my_models', {\n      plainField: {},\n      refField: {codec: RefCodec}\n    })\n\n    assert.deepEqual(MyModel.fields, {\n      plainField: new Field({path: ['data', 'plainField']}),\n      refField: new Field({codec: RefCodec, path: ['data', 'refField']})\n    })\n  })\n\n  it('no codec', () => {\n    assert.equal(instance.plainField, 1)\n    instance.plainField = 2\n    assert.equal(instance.plainField, 2)\n  })\n\n  it('custom codec', () => {\n    const it = instance\n    assert.equal(it.codecField, 'doubleme')\n    assert.equal(it.getEncoded('codecField'), 'doublemedoubleme')\n    it.codecField = 'doub'\n    assert.equal(it.codecField, 'doub')\n    assert.equal(it.getEncoded('codecField'), 'doubdoub')\n  })\n\n  it('ref codec', async function() {\n    const it = new MyModel(client)\n    assert.equal(it.refField, null)\n\n    const ref = new Ref('frogs', 123)\n    it.refField = 'frogs/123'\n    assert.deepEqual(it.refField, ref)\n\n    it.refField = ref\n    assert.equal(it.refField, ref)\n\n    // Fails for any other input\n    assert.throws(() => { it.refField = 123 }, InvalidValue)\n  })\n})\n"
  },
  {
    "__docId__": 297,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe21",
    "testId": 21,
    "memberof": "test/model/codec_test.js",
    "testDepth": 0,
    "longname": "test/model/codec_test.js~describe21",
    "access": null,
    "description": "Codec",
    "lineNumber": 12
  },
  {
    "__docId__": 298,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it22",
    "testId": 22,
    "memberof": "test/model/codec_test.js~describe21",
    "testDepth": 1,
    "longname": "test/model/codec_test.js~describe21.it22",
    "access": null,
    "description": "model fields",
    "lineNumber": 36
  },
  {
    "__docId__": 299,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it23",
    "testId": 23,
    "memberof": "test/model/codec_test.js~describe21",
    "testDepth": 1,
    "longname": "test/model/codec_test.js~describe21.it23",
    "access": null,
    "description": "no codec",
    "lineNumber": 49
  },
  {
    "__docId__": 300,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it24",
    "testId": 24,
    "memberof": "test/model/codec_test.js~describe21",
    "testDepth": 1,
    "longname": "test/model/codec_test.js~describe21.it24",
    "access": null,
    "description": "custom codec",
    "lineNumber": 55
  },
  {
    "__docId__": 301,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it25",
    "testId": 25,
    "memberof": "test/model/codec_test.js~describe21",
    "testDepth": 1,
    "longname": "test/model/codec_test.js~describe21.it25",
    "access": null,
    "description": "ref codec",
    "lineNumber": 64
  },
  {
    "__docId__": 302,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/model/model_test.js",
    "memberof": null,
    "longname": "test/model/model_test.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {assert} from 'chai'\nimport {assertRejected, client} from '../util'\nimport {InvalidValue, NotFound} from '../../src/errors'\nimport {Class} from '../../src/model/Builtin'\nimport Model from '../../src/model/Model'\nimport {Ref} from '../../src/objects'\nimport * as query from '../../src/query'\n\nlet MyModel\n\ndescribe('Model', () => {\n  before(async function() {\n    MyModel = class MyModel extends Model {}\n    MyModel.setup('my_models', {number: {}, letter: {}})\n    await Class.createForModel(client, MyModel)\n  })\n\n  it('common fields', async function() {\n    const instance = await MyModel.create(client)\n    assert.instanceOf(instance.ref, Ref)\n    assert.typeOf(instance.ts, 'number')\n    assert.equal(instance.id, instance.ref.id)\n  })\n\n  it('persistence', async function() {\n    const it = new MyModel(client, {number: 1, letter: 'a'})\n\n    const get = () => MyModel.get(client, it.ref)\n\n    assert(it.isNewInstance())\n\n    await it.save()\n    assert(!it.isNewInstance())\n    assert.deepEqual(await get(), it)\n\n    it.number = 2\n    assert.deepEqual(it._diff(), {data: {number: 2}})\n    await it.save()\n    assert.deepEqual(it._diff(), {})\n    assert.deepEqual(await get(), it)\n\n    await it.delete()\n\n    assertRejected(it.delete(), NotFound)\n  })\n\n  it('bad field', () => {\n    assert.throws(() => new MyModel(client, {nubber: 1}), InvalidValue)\n  })\n\n  it('replace', async function() {\n    const it = new MyModel(client, {number: 1, letter: 'a'})\n    await it.save()\n\n    const get = () => MyModel.get(client, it.ref)\n\n    const copy = await get()\n\n    copy.number = 2\n    await copy.save()\n\n    it.letter = 'b'\n    // This will only update the 'letter' property.\n    await it.save()\n\n    const got = await get()\n    assert.equal(got.number, 2)\n    assert.equal(got.letter, 'b')\n\n    copy.number = 3\n    await copy.save()\n\n    it.letter = 'c'\n    await it.save(true)\n\n    assert.deepEqual(await get(), it)\n  })\n\n  it('replace with new fields', async function() {\n    class GrowModel extends Model {}\n    GrowModel.setup('grow_models', {number: {}})\n    await Class.createForModel(client, GrowModel)\n\n    let g = new GrowModel(client, {number: 1})\n    await g.save()\n\n    GrowModel.addField('letter')\n    g = await GrowModel.get(client, g.ref)\n    g.letter = 'a'\n    await g.save(true)\n\n    assert.equal(g.number, 1)\n    assert.equal(g.letter, 'a')\n    assert.deepEqual(await GrowModel.get(client, g.ref), g)\n  })\n\n  it('ref, id, ts', async function() {\n    const it = new MyModel(client, {number: 1, letter: 'a'})\n\n    assert.equal(it.ref, null)\n    assert.equal(it.id, null)\n    assert.equal(it.ts, null)\n\n    await it.save()\n    assert(it.ref != null && it.ts != null)\n    assert(it.id === it.ref.id)\n    const ref1 = it.ref\n    const ts1 = it.ts\n\n    it.number = 2\n    await it.save()\n    assert.deepEqual(it.ref, ref1)\n    assert(it.ts != null && it.ts !== ts1)\n  })\n\n  it('update', async function() {\n    const it = new MyModel(client, {number: {a: {b: 1, c: 2}}})\n    await it.save()\n\n    it.number.a.b = -1\n    it.number.a.d = {e: 3}\n    assert.deepEqual(it._diff(), {data: {number: {a: {b: -1, d: {e: 3}}}}})\n\n    await it.save()\n    assert.deepEqual(await MyModel.get(client, it.ref), it)\n  })\n\n  it('stream', async function() {\n    const indexRef = (await client.post('indexes', {\n      name: 'my_models_by_number',\n      source: MyModel.classRef,\n      terms: [{path: 'data.number'}]\n    })).ref\n\n    const\n      a = await MyModel.create(client, {number: 12}),\n      b = await MyModel.create(client, {number: 12})\n\n    const instanceSet = query.match(12, indexRef)\n    const stream = MyModel.stream(client, instanceSet)\n    assert.deepEqual(await stream.all(), [a, b])\n  })\n\n  it('toString', () => {\n    const m = new MyModel(client, {number: 1, letter: 2})\n    assert.equal(m.toString(), 'MyModel(number: 1, letter: 2)')\n  })\n})\n"
  },
  {
    "__docId__": 303,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe26",
    "testId": 26,
    "memberof": "test/model/model_test.js",
    "testDepth": 0,
    "longname": "test/model/model_test.js~describe26",
    "access": null,
    "description": "Model",
    "lineNumber": 11
  },
  {
    "__docId__": 304,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it27",
    "testId": 27,
    "memberof": "test/model/model_test.js~describe26",
    "testDepth": 1,
    "longname": "test/model/model_test.js~describe26.it27",
    "access": null,
    "description": "common fields",
    "lineNumber": 18
  },
  {
    "__docId__": 305,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it28",
    "testId": 28,
    "memberof": "test/model/model_test.js~describe26",
    "testDepth": 1,
    "longname": "test/model/model_test.js~describe26.it28",
    "access": null,
    "description": "persistence",
    "lineNumber": 25
  },
  {
    "__docId__": 306,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it29",
    "testId": 29,
    "memberof": "test/model/model_test.js~describe26",
    "testDepth": 1,
    "longname": "test/model/model_test.js~describe26.it29",
    "access": null,
    "description": "bad field",
    "lineNumber": 47
  },
  {
    "__docId__": 307,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it30",
    "testId": 30,
    "memberof": "test/model/model_test.js~describe26",
    "testDepth": 1,
    "longname": "test/model/model_test.js~describe26.it30",
    "access": null,
    "description": "replace",
    "lineNumber": 51
  },
  {
    "__docId__": 308,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it31",
    "testId": 31,
    "memberof": "test/model/model_test.js~describe26",
    "testDepth": 1,
    "longname": "test/model/model_test.js~describe26.it31",
    "access": null,
    "description": "replace with new fields",
    "lineNumber": 79
  },
  {
    "__docId__": 309,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it32",
    "testId": 32,
    "memberof": "test/model/model_test.js~describe26",
    "testDepth": 1,
    "longname": "test/model/model_test.js~describe26.it32",
    "access": null,
    "description": "ref, id, ts",
    "lineNumber": 97
  },
  {
    "__docId__": 310,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it33",
    "testId": 33,
    "memberof": "test/model/model_test.js~describe26",
    "testDepth": 1,
    "longname": "test/model/model_test.js~describe26.it33",
    "access": null,
    "description": "update",
    "lineNumber": 116
  },
  {
    "__docId__": 311,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it34",
    "testId": 34,
    "memberof": "test/model/model_test.js~describe26",
    "testDepth": 1,
    "longname": "test/model/model_test.js~describe26.it34",
    "access": null,
    "description": "stream",
    "lineNumber": 128
  },
  {
    "__docId__": 312,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it35",
    "testId": 35,
    "memberof": "test/model/model_test.js~describe26",
    "testDepth": 1,
    "longname": "test/model/model_test.js~describe26.it35",
    "access": null,
    "description": "toString",
    "lineNumber": 144
  },
  {
    "__docId__": 313,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/model/util_test.js",
    "memberof": null,
    "longname": "test/model/util_test.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {assert} from 'chai'\nimport {calculateDiff, getPath, objectDup, setPath} from '../../src/model/_util'\n\ndescribe('model/_util', () => {\n  it('dup', () => {\n    const orig = {a: 1, b: 2}\n    const copy = objectDup(orig)\n    assert.deepEqual(copy, orig)\n    assert.notEqual(copy, orig)\n  })\n\n  it('getPath', () => {\n    assert.equal(getPath(['a', 'b', 'c'], {a: {b: {c: 1}}}), 1)\n    assert.equal(getPath(['x', 'y', 'z'], {x: {y: 1}}), null)\n  })\n\n  it('setPath', () => {\n    const data = {}\n    setPath(['a', 'b'], 1, data)\n    assert.deepEqual(data, {a: {b: 1}})\n  })\n\n  it('diff', () => {\n    assert.deepEqual(calculateDiff({a: 1, b: 2}, {a: 1, b: 2}), {})\n    assert.deepEqual(calculateDiff({a: 1}, {a: 2}), {a: 2})\n    assert.deepEqual(calculateDiff({a: 1}, {a: 1, b: 2}), {b: 2})\n    assert.deepEqual(calculateDiff({a: 1, b: 2}, {a: 1}), {b: null})\n  })\n})\n"
  },
  {
    "__docId__": 314,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe36",
    "testId": 36,
    "memberof": "test/model/util_test.js",
    "testDepth": 0,
    "longname": "test/model/util_test.js~describe36",
    "access": null,
    "description": "model/_util",
    "lineNumber": 4
  },
  {
    "__docId__": 315,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it37",
    "testId": 37,
    "memberof": "test/model/util_test.js~describe36",
    "testDepth": 1,
    "longname": "test/model/util_test.js~describe36.it37",
    "access": null,
    "description": "dup",
    "lineNumber": 5
  },
  {
    "__docId__": 316,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it38",
    "testId": 38,
    "memberof": "test/model/util_test.js~describe36",
    "testDepth": 1,
    "longname": "test/model/util_test.js~describe36.it38",
    "access": null,
    "description": "getPath",
    "lineNumber": 12
  },
  {
    "__docId__": 317,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it39",
    "testId": 39,
    "memberof": "test/model/util_test.js~describe36",
    "testDepth": 1,
    "longname": "test/model/util_test.js~describe36.it39",
    "access": null,
    "description": "setPath",
    "lineNumber": 17
  },
  {
    "__docId__": 318,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it40",
    "testId": 40,
    "memberof": "test/model/util_test.js~describe36",
    "testDepth": 1,
    "longname": "test/model/util_test.js~describe36.it40",
    "access": null,
    "description": "diff",
    "lineNumber": 23
  },
  {
    "__docId__": 319,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/objects_test.js",
    "memberof": null,
    "longname": "test/objects_test.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {assert} from 'chai'\nimport {InvalidValue} from '../src/errors'\nimport {Event, Page, Ref, FaunaSet} from '../src/objects'\nimport {parseJSON, toJSON} from '../src/_json'\nimport * as query from '../src/query'\n\ndescribe('objects', () => {\n  const\n    ref = new Ref('classes', 'frogs', '123'),\n    jsonRef = '{\"@ref\":\"classes/frogs/123\"}'\n\n  it('ref', () => {\n    assert.deepEqual(parseJSON(jsonRef), ref)\n    assert.equal(toJSON(ref), jsonRef)\n\n    const blobs = new Ref('classes', 'blobs'), blobRef = new Ref(blobs, '123')\n    assert.deepEqual(blobRef.class, blobs)\n    assert.equal(blobRef.id, '123')\n\n    const keys = new Ref('keys')\n    assert.deepEqual(keys.class, keys)\n    assert.throws(() => keys.id, InvalidValue)\n\n    const keyRef = new Ref(keys, '123')\n    assert.deepEqual(keyRef.class, keys)\n    assert.equal(keyRef.id, '123')\n\n    // valueOf converts to string\n    assert.equal('' + blobRef, 'classes/blobs/123')\n  })\n\n  it('set', () => {\n    const\n      index = new Ref('indexes', 'frogs_by_size'),\n      jsonIndex = '{\"@ref\":\"indexes/frogs_by_size\"}',\n      match = new FaunaSet(query.match(ref, index)),\n      jsonMatch = `{\"@set\":{\"match\":${jsonRef},\"index\":${jsonIndex}}}`\n    assert.deepEqual(parseJSON(jsonMatch), match)\n    assert.equal(toJSON(match), jsonMatch)\n  })\n\n  it('event', () => {\n    assert.equal(toJSON(new Event(123, null, null)), '{\"ts\":123}')\n    const event_json = '{\"ts\":123,\"action\":\"create\",\"resource\":{\"@ref\":\"classes/frogs/123\"}}'\n    assert.equal(toJSON(new Event(123, 'create', ref)), event_json)\n  })\n\n  it('page', () => {\n    assert.deepEqual(Page.fromRaw({data: 1, before: 2, after: 3}), new Page(1, 2, 3))\n    assert.deepEqual(new Page([1, 2, 3], 2, 3).mapData(_ => _ + 1), new Page([2, 3, 4], 2, 3))\n  })\n})\n"
  },
  {
    "__docId__": 320,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe41",
    "testId": 41,
    "memberof": "test/objects_test.js",
    "testDepth": 0,
    "longname": "test/objects_test.js~describe41",
    "access": null,
    "description": "objects",
    "lineNumber": 7
  },
  {
    "__docId__": 321,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it42",
    "testId": 42,
    "memberof": "test/objects_test.js~describe41",
    "testDepth": 1,
    "longname": "test/objects_test.js~describe41.it42",
    "access": null,
    "description": "ref",
    "lineNumber": 12
  },
  {
    "__docId__": 322,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it43",
    "testId": 43,
    "memberof": "test/objects_test.js~describe41",
    "testDepth": 1,
    "longname": "test/objects_test.js~describe41.it43",
    "access": null,
    "description": "set",
    "lineNumber": 32
  },
  {
    "__docId__": 323,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it44",
    "testId": 44,
    "memberof": "test/objects_test.js~describe41",
    "testDepth": 1,
    "longname": "test/objects_test.js~describe41.it44",
    "access": null,
    "description": "event",
    "lineNumber": 42
  },
  {
    "__docId__": 324,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it45",
    "testId": 45,
    "memberof": "test/objects_test.js~describe41",
    "testDepth": 1,
    "longname": "test/objects_test.js~describe41.it45",
    "access": null,
    "description": "page",
    "lineNumber": 48
  },
  {
    "__docId__": 325,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/query_test.js",
    "memberof": null,
    "longname": "test/query_test.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {assert} from 'chai'\nimport {BadRequest, NotFound} from '../src/errors'\nimport {FaunaSet} from '../src/objects'\nimport * as query from '../src/query'\nimport {assertRejected, client} from './util'\n\nlet class_ref, nIndexRef, mIndexRef, refN1, refM1, refN1M1\n\ndescribe('query', () => {\n  before(async function() {\n    class_ref = (await client.post('classes', {name: 'widgets'})).ref\n\n    nIndexRef = (await client.post('indexes', {\n      name: 'widgets_by_n',\n      source: class_ref,\n      path: 'data.n',\n      active: true\n    })).ref\n\n    mIndexRef = (await client.post('indexes', {\n      name: 'widgets_by_m',\n      source: class_ref,\n      path: 'data.m',\n      active: true\n    })).ref\n\n    refN1 = (await create({n: 1})).ref\n    refM1 = (await create({m: 1})).ref\n    refN1M1 = (await create({n: 1, m: 1})).ref\n  })\n\n  it('let/var', async function() {\n    await assertQuery(query.let_expr({x: 1}, query.variable('x')), 1)\n  })\n\n  it('if', async function() {\n    await assertQuery(query.if_expr(true, 't', 'f'), 't')\n    await assertQuery(query.if_expr(false, 't', 'f'), 'f')\n  })\n\n  it('do', async function() {\n    const ref = (await create()).ref\n    await assertQuery(query.do_expr(query.delete_expr(ref), 1), 1)\n    await assertQuery(query.exists(ref), false)\n  })\n\n  it('object', async function() {\n    const obj = query.object({x: query.let_expr({x: 1}, query.variable('x'))})\n    await assertQuery(obj, {x: 1})\n  })\n\n  it('quote', async function() {\n    const quoted = query.let_expr({x: 1}, query.variable('x'))\n    await assertQuery(query.quote(quoted), quoted)\n  })\n\n  it('lambda', () => {\n    assert.deepEqual(\n      query.lambda(a => query.add(a, a)),\n      {lambda: 'a', expr: {add: [{var: 'a'}, {var: 'a'}]}})\n\n    assert.deepEqual(\n      query.lambda(a => query.lambda(b => query.lambda(c => [a, b, c]))),\n      {\n        lambda: 'a',\n        expr: {lambda: 'b', expr: {lambda: 'c', expr: [{var: 'a'}, {var: 'b'}, {var: 'c'}]}}\n      })\n\n    // Error in function should not affect future queries.\n    try { query.lambda(() => { throw new Error() }) } catch (err) { }\n\n    assert.deepEqual(query.lambda(a => a), {lambda: 'a', expr: {var: 'a'}})\n  })\n\n  it('map', async function() {\n    const double = query.lambda(x => query.multiply([2, x]))\n    await assertQuery(query.map(double, [1, 2, 3]), [2, 4, 6])\n\n    const getN = query.lambda(x => query.select(['data', 'n'], query.get(x)))\n    const page = query.paginate(nSet(1))\n    const ns = query.map(getN, page)\n    assert.deepEqual((await client.query(ns)).data, [1, 1])\n  })\n\n  it('foreach', async function() {\n    const refs = [(await create()).ref, (await create()).ref]\n    await client.query(\n      query.foreach(query.lambda(query.delete_expr), refs))\n    for (const ref of refs)\n      await assertQuery(query.exists(ref), false)\n  })\n\n  it('get', async function() {\n    const instance = await create()\n    await assertQuery(query.get(instance.ref), instance)\n  })\n\n  it('paginate', async function() {\n    const testSet = nSet(1)\n    await assertQuery(query.paginate(testSet), {data: [refN1, refN1M1]})\n    await assertQuery(query.paginate(testSet, {size: 1}), {data: [refN1], after: refN1M1})\n    await assertQuery(query.paginate(testSet, {sources: true}), {\n      data: [\n        {sources: [new FaunaSet(testSet)], value: refN1},\n        {sources: [new FaunaSet(testSet)], value: refN1M1}\n      ]\n    })\n  })\n\n  it('exists', async function() {\n    const ref = (await create()).ref\n    await assertQuery(query.exists(ref), true)\n    await client.query(query.delete_expr(ref))\n    await assertQuery(query.exists(ref), false)\n  })\n\n  it('count', async function() {\n    await create({n: 123})\n    await create({n: 123})\n    const instances = nSet(123)\n    // `count` is currently only approximate. Should be 2.\n    assert.typeOf(await client.query(query.count(instances)), 'number')\n  })\n\n  it('create', async function() {\n    const instance = await create()\n    assert('ref' in instance)\n    assert('ts' in instance)\n    assert.deepEqual(instance.class, class_ref)\n  })\n\n  it('update', async function() {\n    const ref = (await create()).ref\n    const got = await client.query(query.update(ref, query.quote({data: {m: 9}})))\n    assert.deepEqual(got.data, {n: 0, m: 9})\n  })\n\n  it('replace', async function() {\n    const ref = (await create()).ref\n    const got = await client.query(query.replace(ref, query.quote({data: {m: 9}})))\n    assert.deepEqual(got.data, {m: 9})\n  })\n\n  it('delete', async function() {\n    const ref = (await create()).ref\n    await client.query(query.delete_expr(ref))\n    await assertQuery(query.exists(ref), false)\n  })\n\n  it('match', async function() {\n    await assertSet(nSet(1), [refN1, refN1M1])\n  })\n\n  it('union', async function() {\n    await assertSet(query.union(nSet(1), mSet(1)), [refN1, refM1, refN1M1])\n  })\n\n  it('intersection', async function() {\n    await assertSet(query.intersection(nSet(1), mSet(1)), [refN1M1])\n  })\n\n  it('difference', async function() {\n    await assertSet(query.difference(nSet(1), mSet(1)), [refN1]) // but not refN1M1\n  })\n\n  it('join', async function() {\n    const referenced = [\n      (await create({n: 12})).ref,\n      (await create({n: 12})).ref\n    ]\n    const referencers = [\n      (await create({m: referenced[0]})).ref,\n      (await create({m: referenced[1]})).ref\n    ]\n\n    const source = nSet(12)\n    await assertSet(source, referenced)\n\n    // For each obj with n=12, get the set of elements whose data.m refers to it.\n    const joined = query.join(\n      source,\n      query.lambda(x => query.match(x, mIndexRef)))\n    await assertSet(joined, referencers)\n  })\n\n  it('equals', async function() {\n    await assertQuery(query.equals(1, 1, 1), true)\n    await assertQuery(query.equals(1, 1, 2), false)\n    await assertQuery(query.equals(1), true)\n    await assertBadQuery(query.equals())\n  })\n\n  it('concat', async function() {\n    await assertQuery(query.concat('a', 'b', 'c'), 'abc')\n    await assertQuery(query.concat(), '')\n  })\n\n  it('contains', async function() {\n    const obj = query.quote({a: {b: 1}})\n    await assertQuery(query.contains(['a', 'b'], obj), true)\n    await assertQuery(query.contains('a', obj), true)\n    await assertQuery(query.contains(['a', 'c'], obj), false)\n  })\n\n  it('select', async function() {\n    const obj = query.quote({a: {b: 1}})\n    await assertQuery(query.select('a', obj), {b: 1})\n    await assertQuery(query.select(['a', 'b'], obj), 1)\n    await assertQuery(query.selectWithDefault('c', obj, null), null)\n    await assertBadQuery(query.select('c', obj), NotFound)\n  })\n\n  it('select for array', async function() {\n    const arr = [1, 2, 3]\n    await assertQuery(query.select(2, arr), 3)\n    await assertBadQuery(query.select(3, arr), NotFound)\n  })\n\n  it('add', async function() {\n    await assertQuery(query.add(2, 3, 5), 10)\n    await assertBadQuery(query.add())\n  })\n\n  it('multiply', async function() {\n    await assertQuery(query.multiply(2, 3, 5), 30)\n    await assertBadQuery(query.multiply())\n  })\n\n  it('subtract', async function() {\n    await assertQuery(query.subtract(2, 3, 5), -6)\n    await assertQuery(query.subtract(2), 2)\n    await assertBadQuery(query.subtract())\n  })\n\n  it('divide', async function() {\n    // TODO: can't make this query because 2.0 === 2\n    // await assertQuery(query.divide(2, 3, 5), 2/15)\n    await assertQuery(query.divide(2), 2)\n    await assertBadQuery(query.divide(1, 0))\n    await assertBadQuery(query.divide())\n  })\n\n  it('varargs', async function() {\n    // Works for lists too\n    await assertQuery(query.add([2, 3, 5]), 10)\n    // Works for a variable equal to a list\n    await assertQuery(query.let_expr({x: [2, 3, 5]}, query.add(query.variable('x'))), 10)\n  })\n})\n\nconst\n  create = (data={}) => {\n    if (data.n === undefined)\n      data.n = 0\n    return client.query(query.create(class_ref, query.quote({data})))\n  },\n  nSet = n =>\n    query.match(n, nIndexRef),\n  mSet = m =>\n    query.match(m, mIndexRef)\n\nasync function assertQuery(query, expected) {\n  assert.deepEqual(await client.query(query), expected)\n}\nasync function assertBadQuery(query, errorType=BadRequest) {\n  assertRejected(client.query(query), errorType)\n}\nasync function assertSet(set, expected) {\n  assert.deepEqual(await getSetContents(set), expected)\n}\nasync function getSetContents(set) {\n  return (await client.query(query.paginate(set, {size: 1000}))).data\n}\n"
  },
  {
    "__docId__": 326,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe46",
    "testId": 46,
    "memberof": "test/query_test.js",
    "testDepth": 0,
    "longname": "test/query_test.js~describe46",
    "access": null,
    "description": "query",
    "lineNumber": 9
  },
  {
    "__docId__": 327,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it47",
    "testId": 47,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it47",
    "access": null,
    "description": "let/var",
    "lineNumber": 32
  },
  {
    "__docId__": 328,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it48",
    "testId": 48,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it48",
    "access": null,
    "description": "if",
    "lineNumber": 36
  },
  {
    "__docId__": 329,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it49",
    "testId": 49,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it49",
    "access": null,
    "description": "do",
    "lineNumber": 41
  },
  {
    "__docId__": 330,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it50",
    "testId": 50,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it50",
    "access": null,
    "description": "object",
    "lineNumber": 47
  },
  {
    "__docId__": 331,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it51",
    "testId": 51,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it51",
    "access": null,
    "description": "quote",
    "lineNumber": 52
  },
  {
    "__docId__": 332,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it52",
    "testId": 52,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it52",
    "access": null,
    "description": "lambda",
    "lineNumber": 57
  },
  {
    "__docId__": 333,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it53",
    "testId": 53,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it53",
    "access": null,
    "description": "map",
    "lineNumber": 75
  },
  {
    "__docId__": 334,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it54",
    "testId": 54,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it54",
    "access": null,
    "description": "foreach",
    "lineNumber": 85
  },
  {
    "__docId__": 335,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it55",
    "testId": 55,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it55",
    "access": null,
    "description": "get",
    "lineNumber": 93
  },
  {
    "__docId__": 336,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it56",
    "testId": 56,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it56",
    "access": null,
    "description": "paginate",
    "lineNumber": 98
  },
  {
    "__docId__": 337,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it57",
    "testId": 57,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it57",
    "access": null,
    "description": "exists",
    "lineNumber": 110
  },
  {
    "__docId__": 338,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it58",
    "testId": 58,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it58",
    "access": null,
    "description": "count",
    "lineNumber": 117
  },
  {
    "__docId__": 339,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it59",
    "testId": 59,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it59",
    "access": null,
    "description": "create",
    "lineNumber": 125
  },
  {
    "__docId__": 340,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it60",
    "testId": 60,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it60",
    "access": null,
    "description": "update",
    "lineNumber": 132
  },
  {
    "__docId__": 341,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it61",
    "testId": 61,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it61",
    "access": null,
    "description": "replace",
    "lineNumber": 138
  },
  {
    "__docId__": 342,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it62",
    "testId": 62,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it62",
    "access": null,
    "description": "delete",
    "lineNumber": 144
  },
  {
    "__docId__": 343,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it63",
    "testId": 63,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it63",
    "access": null,
    "description": "match",
    "lineNumber": 150
  },
  {
    "__docId__": 344,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it64",
    "testId": 64,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it64",
    "access": null,
    "description": "union",
    "lineNumber": 154
  },
  {
    "__docId__": 345,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it65",
    "testId": 65,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it65",
    "access": null,
    "description": "intersection",
    "lineNumber": 158
  },
  {
    "__docId__": 346,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it66",
    "testId": 66,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it66",
    "access": null,
    "description": "difference",
    "lineNumber": 162
  },
  {
    "__docId__": 347,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it67",
    "testId": 67,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it67",
    "access": null,
    "description": "join",
    "lineNumber": 166
  },
  {
    "__docId__": 348,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it68",
    "testId": 68,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it68",
    "access": null,
    "description": "equals",
    "lineNumber": 186
  },
  {
    "__docId__": 349,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it69",
    "testId": 69,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it69",
    "access": null,
    "description": "concat",
    "lineNumber": 193
  },
  {
    "__docId__": 350,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it70",
    "testId": 70,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it70",
    "access": null,
    "description": "contains",
    "lineNumber": 198
  },
  {
    "__docId__": 351,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it71",
    "testId": 71,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it71",
    "access": null,
    "description": "select",
    "lineNumber": 205
  },
  {
    "__docId__": 352,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it72",
    "testId": 72,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it72",
    "access": null,
    "description": "select for array",
    "lineNumber": 213
  },
  {
    "__docId__": 353,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it73",
    "testId": 73,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it73",
    "access": null,
    "description": "add",
    "lineNumber": 219
  },
  {
    "__docId__": 354,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it74",
    "testId": 74,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it74",
    "access": null,
    "description": "multiply",
    "lineNumber": 224
  },
  {
    "__docId__": 355,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it75",
    "testId": 75,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it75",
    "access": null,
    "description": "subtract",
    "lineNumber": 229
  },
  {
    "__docId__": 356,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it76",
    "testId": 76,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it76",
    "access": null,
    "description": "divide",
    "lineNumber": 235
  },
  {
    "__docId__": 357,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it77",
    "testId": 77,
    "memberof": "test/query_test.js~describe46",
    "testDepth": 1,
    "longname": "test/query_test.js~describe46.it77",
    "access": null,
    "description": "varargs",
    "lineNumber": 243
  },
  {
    "__docId__": 358,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/stream_test.js",
    "memberof": null,
    "longname": "test/stream_test.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {assert} from 'chai'\nimport AsyncStream from '../src/AsyncStream'\nimport PageStream from '../src/PageStream'\nimport * as query from '../src/query'\nimport {client} from './util'\n\nconst countToFour = () =>\n  AsyncStream.fromIterable([0, 1, 2, 3, 4])\n\ndescribe('stream', () => {\n  it('stream', async function() {\n    assert.deepEqual(await countToFour().all(), [0, 1, 2, 3, 4])\n  })\n\n  it('map', async function() {\n    assert.deepEqual(await countToFour().map(n => n * 2).all(), [0, 2, 4, 6, 8])\n  })\n\n  it('filter', async function() {\n    assert.deepEqual(await countToFour().filter(n => n % 2 === 0).all(), [0, 2, 4])\n  })\n\n  it('takeWhile', async function() {\n    assert.deepEqual(await countToFour().takeWhile(n => n < 3).all(), [0, 1, 2])\n  })\n\n  it('flatten', async function() {\n    assert.deepEqual(\n      await AsyncStream.fromIterable([[0, 1], [], [2, 3, 4]]).flatten().all(),\n      [0, 1, 2, 3, 4])\n  })\n\n  it('flatMap', async function() {\n    assert.deepEqual(\n      await AsyncStream.fromIterable([0, 1, 2]).flatMap(n => [n, n]).all(),\n      [0, 0, 1, 1, 2, 2])\n  })\n\n  it('page stream', async function() {\n    const classRef = (await client.post('classes', {name: 'gadgets'})).ref\n    const indexRef = (await client.post('indexes', {\n      name: 'gadgets_by_n',\n      source: classRef,\n      path: 'data.n',\n      active: true\n    })).ref\n\n    async function create(n) {\n      const q = query.create(classRef, query.quote({data: {n}}))\n      return (await client.query(q)).ref\n    }\n\n    const a = await create(0)\n    await create(1)\n    const b = await create(0), c = await create(0), d = await create(0)\n\n    const gadgetsSet = query.match(0, indexRef)\n\n    const stream = new PageStream(client, gadgetsSet, {pageSize: 2})\n\n    assert.deepEqual(await stream.all(), [[a, b], [c, d]])\n\n    assert.deepEqual(\n      await PageStream.elements(client, gadgetsSet, {pageSize: 2}).all(),\n      [a, b, c, d])\n\n    // Test mapLambda\n    const mapStream = PageStream.elements(client, gadgetsSet, {\n      pageSize: 2,\n      mapLambda: query.lambda(x => query.select(['data', 'n'], x))\n    })\n    assert.deepEqual(await mapStream.all(), [0, 0, 0, 0])\n  })\n})"
  },
  {
    "__docId__": 359,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe78",
    "testId": 78,
    "memberof": "test/stream_test.js",
    "testDepth": 0,
    "longname": "test/stream_test.js~describe78",
    "access": null,
    "description": "stream",
    "lineNumber": 10
  },
  {
    "__docId__": 360,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it79",
    "testId": 79,
    "memberof": "test/stream_test.js~describe78",
    "testDepth": 1,
    "longname": "test/stream_test.js~describe78.it79",
    "access": null,
    "description": "stream",
    "lineNumber": 11
  },
  {
    "__docId__": 361,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it80",
    "testId": 80,
    "memberof": "test/stream_test.js~describe78",
    "testDepth": 1,
    "longname": "test/stream_test.js~describe78.it80",
    "access": null,
    "description": "map",
    "lineNumber": 15
  },
  {
    "__docId__": 362,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it81",
    "testId": 81,
    "memberof": "test/stream_test.js~describe78",
    "testDepth": 1,
    "longname": "test/stream_test.js~describe78.it81",
    "access": null,
    "description": "filter",
    "lineNumber": 19
  },
  {
    "__docId__": 363,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it82",
    "testId": 82,
    "memberof": "test/stream_test.js~describe78",
    "testDepth": 1,
    "longname": "test/stream_test.js~describe78.it82",
    "access": null,
    "description": "takeWhile",
    "lineNumber": 23
  },
  {
    "__docId__": 364,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it83",
    "testId": 83,
    "memberof": "test/stream_test.js~describe78",
    "testDepth": 1,
    "longname": "test/stream_test.js~describe78.it83",
    "access": null,
    "description": "flatten",
    "lineNumber": 27
  },
  {
    "__docId__": 365,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it84",
    "testId": 84,
    "memberof": "test/stream_test.js~describe78",
    "testDepth": 1,
    "longname": "test/stream_test.js~describe78.it84",
    "access": null,
    "description": "flatMap",
    "lineNumber": 33
  },
  {
    "__docId__": 366,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it85",
    "testId": 85,
    "memberof": "test/stream_test.js~describe78",
    "testDepth": 1,
    "longname": "test/stream_test.js~describe78.it85",
    "access": null,
    "description": "page stream",
    "lineNumber": 39
  }
]